import { JArray, JObject, JToken, UtilFunc } from "@zwa73/utils";
import { genActEoc, genEOCID, genSpellID } from "ModDefine";
import { Spell, SpellEnergySource, SpellID ,AnyItemID, FlagID, BoolObj, Eoc, EocEffect, EocID, NumMathExp, NumObj, NoParamTalkerCondList, WeaponCategoryID, EffectID, Time, ParamsEoc, InlineEoc, SpellFlag, DamageTypeID} from "CddaJsonFormat";
import { DataManager } from "../DataManager";
import { CON_SPELL_FLAG, SPELL_CT_MODMOVE, SPELL_CT_MODMOVE_VAR, SPELL_MAX_DAMAGE,TARGET_MON_ID } from "StaticData";
import { CnpcEventTypeList, CnpcEventType, CnpcInteractiveEventList, CnpcReverseEventTypeList, CnpcReverseEventType, AnyCnpcEvenetType } from "Event";


/**技能选择目标类型 列表 */
const TargetTypeList = [
    "auto"          ,//自动         任意非翻转hook
    "random"        ,//原版随机     任意非翻转hook
    "spell_target"  ,//瞄准法术标靶 任意非翻转hook 但法术标靶只在造成伤害时生成
    "reverse_hit"   ,//翻转命中交互单位 u为角色 n为受害者 处理时翻转 hook必须为ReverseCharEventType
    "direct_hit"    ,//直接命中交互单位 u为角色 n为受害者 hook必须为InteractiveCharEvent
    "auto_hit"      ,//自动判断命中交互单位 hook必须为InteractiveCharEvent或ReverseCharEventType
    "filter_random" ,//筛选目标随机 u为角色 n为受害者 处理时翻转 任意非翻转hook
]as const;
/**技能选择目标类型 */
type TargetType = typeof TargetTypeList[number];
/**角色技能 */
export type CharSkill = {
    /**技能名 */
    name:string;
    /**技能的释放条件 */
    cast_condition:CastCondition|CastCondition[];
    /**权重 优先尝试触发高权重的spell 默认0 */
    weight?         :number;
    /**概率 有1/chance的几率使用这个技能 默认1 */
    one_in_chance?  :number;
    /**冷却时间 单位为每次CharUpdate 默认0 */
    cooldown?       :number;
    /**共同冷却时间 影响所有技能的释放 单位为每次CharUpdate 默认1  
     * 一个高权重0共同冷却的技能意味着可以同时触发  
     */
    common_cooldown?:number;
    /**法术效果  
     * 可用 `u_${字段}` 或 `${角色名}_${字段}` 表示 当前/某个角色 的字段变量  
     * 如 min_damage: {math:["u_重击 * 10 + Asuna_重击"]}  
     *   
     * 可用 `u_${法术id}_cooldown` 获得对应技能冷却  
     * 如 {math:["u_fireball_cooldown"]}  
     *   
     * 可用 u_coCooldown 获得公共冷却时间  
     */
    spell           :Spell;
    /**子法术  
     * 将会随主spell一起解析  
     * 作为spell的extra_effects加入  
     */
    extra_effect?  :Spell[];
    /**特殊的子效果 */
    spec_effect?   :SpecEffect[];
    /**技能音效 */
    audio?          :(string|{
        /**音效变体ID */
        id:string,
        /**产生音效的概率 1/n 默认1 */
        one_in_chance?:number,
        /**音量 1-128 默认100 */
        volume?:number,
        /**声音冷却  
         * 每隔n次战斗刷新可触发
         */
        cooldown?:number;
    })[];
    /**要求强化字段 [字段,强化等级] 或 字段名 */
    require_field?:[string,number]|string;
    /**释放成功后运行的效果 */
    after_effect?:EocEffect[];
    /**尝试释放时就运行的效果 */
    before_effect?:EocEffect[];
    /**需求的武器flag  
     * 在角色配置中定义的 武器 会自动生成并添加同ID Flag  
     */
    require_weapon_flag?:FlagID[];
    /**需求的武器分类 */
    require_weapon_category?:WeaponCategoryID[];
    /**需求无武器/完全徒手 */
    require_unarmed?:boolean;
};

/**技能的释放条件 */
export type CastCondition={
    /**释放条件 若允许多个条件请使用{or:[]}  
     * 相同的hook与target将覆盖  
     */
    condition?      :BoolObj;
    /**时机 */
    hook            :AnyCnpcEvenetType;
    /**瞄准方式  
     * auto 为 根据施法目标自动选择;  
     *  
     * random 为 原版随机 适用于自身buff;  
     *  
     * spell_target 为 瞄准目标周围的 攻击时出现的法术标靶 仅适用于攻击触发的范围技能;  
     *  
     * direct_hit 为 直接命中交互单位 使目标使用此法术攻击自己 适用于单体目标技能  
     * hook 必须为互动事件 "CharTakeDamage" | "CharTakeRangeDamage" | "CharTakeMeleeDamage" | "CharSucessMeleeAttack" | "CharCauseRangeHit" | "CharCauseHit";  
     *  
     * reverse_hit 为 翻转命中交互单位 使目标使用此法术攻击自己 适用于单体目标技能  
     * hook 必须为翻转事件 CharCauseDamage | CharCauseMeleeDamage | CharCauseRangeDamage  
     * 除 reverse_hit 外无法使用翻转事件;  
     *  
     * auto_hit 为根据hook在 reverse_hit direct_hit 之间自动判断;  
     *   
     * filter_random 为根据条件筛选可能的目标 命中第一个通过筛选的目标 条件中u为施法者n为目标 适用于队友buff;  
     *  
     * 默认为auto  
     * 若允许多个CastCondition 请指定具体type  
     * 相同的hook与target(包括auto或未指定)将覆盖  
     */
    target?         :TargetType;
}

/**特殊的字效果 */
type SpecEffect = RunEoc|AddEffect|ExtDamage;
/**添加效果 */
type AddEffect = {
    /**生成一个添加效果的子法术 */
    type:"AddEffect";
    /**效果ID */
    effect_id:EffectID;
    /**效果强度 */
    intensity: NumObj;
    /**持续时间 数字为秒 */
    duration: Time|NumObj;
    /**添加效果后的额外效果 */
    effect?:EocEffect[];
    /**是否叠加强度 默认覆盖 */
    is_stack?:boolean;
}
/**以受害者为 u_ 运行EOC */
type RunEoc = {
    /**生成一个运行的子法术 */
    type:"RunEoc";
    /**运行的Eoc */
    eoc:ParamsEoc;
    /**自动生成eoc并运行 */
    effect?         :EocEffect[];
    /**自动生成的eoc的运行条件 */
    condition?      :BoolObj;
}
/**额外造成某种类型的伤害 */
type ExtDamage = {
    type: "ExtDamage";
    count: NumObj;
    damage_type: DamageTypeID;
}

/**特殊效果的处理表 */
const SpecProcMap:Record<SpecEffect["type"],(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData,spec:SpecEffect,index:number)=>void>={
    AddEffect   :processAddEffect   ,
    RunEoc      :processRunEoc      ,
    ExtDamage   :processExtDamage   ,
}


function processAddEffect(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData,spec:SpecEffect,index:number){
    const {skill,baseCond,TEffect,castCondition,PreEffect,extraEffects} = baseSkillData;
    const {spell,one_in_chance} = skill;
    spec = spec as AddEffect;

    const mainid = `${spell.id}_${index}_AddEffect`;

    const intVar = `${mainid}_intensity`;
    PreEffect.push({math:[intVar,"=",parseNumObj(spec.intensity)]})
    let fixdur = spec.duration;
    if(typeof fixdur!="string" && typeof fixdur!="number"){
        const durVar = `${mainid}_duration`;
        PreEffect.push({math:[durVar,"=",parseNumObj(fixdur)]});
        fixdur = {math:[durVar]};
    }

    const addEoc:Eoc={
        type:"effect_on_condition",
        id:genEOCID(mainid),
        eoc_type:"ACTIVATION",
        effect:[
            spec.is_stack==true
            ? {u_add_effect:spec.effect_id,duration:fixdur,intensity:{math:[`max(u_effect_intensity('${spec.effect_id}'),0) + ${intVar}`]}}
            : {u_add_effect:spec.effect_id,duration:fixdur,intensity:{math:[intVar]}},
            ...spec.effect??[]
        ]
    }
    dm.addSharedRes(addEoc.id,addEoc,"common_resource","common_spell_assist");

    const flags:SpellFlag[] = [...CON_SPELL_FLAG];
    if(spell.flags?.includes("IGNORE_WALLS"))
        flags.push("IGNORE_WALLS")

    const {min_aoe,max_aoe,aoe_increment,
        min_range,max_range,range_increment,
        max_level,shape,valid_targets,
        targeted_monster_ids,targeted_monster_species} = spell;

    extraEffects.push({
        type:"SPELL",
        id:genSpellID(mainid),
        effect:"effect_on_condition",
        effect_str:addEoc.id,
        name:`${spell.name}_${index}_AddEffect`,
        description:spell.name+"的添加效果子法术",
        min_aoe,max_aoe,aoe_increment,
        min_range,max_range,range_increment,
        max_level,shape,valid_targets,
        targeted_monster_ids,targeted_monster_species,flags
    })
};
function processRunEoc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData,spec:SpecEffect,index:number){
    const {skill,baseCond,TEffect,castCondition,PreEffect,extraEffects} = baseSkillData;
    const {spell,one_in_chance} = skill;
    spec=spec as RunEoc;

    const mainid = `${spell.id}_${index}_RunEoc`;

    const runEoc:Eoc={
        type:"effect_on_condition",
        id:genEOCID(mainid),
        eoc_type:"ACTIVATION",
        effect:[]
    }
    if(spec.eoc!=undefined)
        runEoc.effect?.push({run_eocs:spec.eoc});
    if(spec.effect!=undefined){
        let inline:InlineEoc={
            id:genEOCID(`${mainid}_inline`),
            eoc_type:"ACTIVATION",
            effect:spec.effect,
        }
        if(spec.condition!=undefined)
            inline.condition=spec.condition;
        runEoc.effect?.push({run_eocs:inline})
    }
    dm.addSharedRes(runEoc.id,runEoc,"common_resource","common_spell_assist");

    const flags:SpellFlag[] = [...CON_SPELL_FLAG];
    if(spell.flags?.includes("IGNORE_WALLS"))
        flags.push("IGNORE_WALLS")

    const {min_aoe,max_aoe,aoe_increment,
        min_range,max_range,range_increment,
        max_level,shape,valid_targets,
        targeted_monster_ids,targeted_monster_species} = spell;

    extraEffects.push({
        type:"SPELL",
        id:genSpellID(mainid),
        effect:"effect_on_condition",
        effect_str:runEoc.id,
        name:`${spell.name}_${index}_RunEoc`,
        description:spell.name+"运行Eoc子法术",
        min_aoe,max_aoe,aoe_increment,
        min_range,max_range,range_increment,
        max_level,shape,valid_targets,
        targeted_monster_ids,targeted_monster_species,flags
    })
};
function processExtDamage(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData,spec:SpecEffect,index:number){
    const {skill,baseCond,TEffect,castCondition,PreEffect,extraEffects} = baseSkillData;
    const {spell,one_in_chance} = skill;
    spec=spec as ExtDamage;

    const mainid = `${spell.id}_${index}_ExtDamage`;

    const flags:SpellFlag[] = [...CON_SPELL_FLAG];
    if(spell.flags?.includes("IGNORE_WALLS"))
        flags.push("IGNORE_WALLS")

    const {min_aoe,max_aoe,aoe_increment,
        min_range,max_range,range_increment,
        max_level,shape,valid_targets,
        targeted_monster_ids,targeted_monster_species} = spell;

    extraEffects.push({
        type:"SPELL",
        id:genSpellID(mainid),
        effect:"attack",
        name:`${spell.name}_${index}_ExtDamage`,
        description:spell.name+"额外伤害子法术",
        min_damage:{math:[parseNumObj(spec.count)]},
        max_damage:SPELL_MAX_DAMAGE,
        damage_type:spec.damage_type,
        min_aoe,max_aoe,aoe_increment,
        min_range,max_range,range_increment,
        max_level,shape,valid_targets,
        targeted_monster_ids,targeted_monster_species,flags
    })
};


//全局冷却字段名
const gcdValName = `u_coCooldown`;

/**使某个技能停止使用的全局变量 */
export function getGlobalDisableSpellVar(charName:string,spell:Spell){
    return `${charName}_${spell.id}_disable`;
}
/**使某个技能停止使用的变量 */
export function getDisableSpellVar(talker:"u"|"n",spell:Spell){
    return `${talker}_${spell.id}_disable`;
}
/**解析音频id */
function parseAudioString(charName:string,str:string,volume:number=100){
    let soundName = charName;
    let varName = str;
    if(str.includes(":")){
        const match = str.match(/(.+):(.+)/);
        if(match==null) throw `parseAudioString 解析错误 字符串:${str}`;
        soundName = match[1];
        varName = match[2];
    }
    return {sound_effect:varName,id:soundName,volume};
}

//法术消耗变量类型映射
const costMap:Record<SpellEnergySource,string|undefined>={
    "BIONIC" : "u_val('power')",
    "HP"     : "u_hp('torso')",
    "MANA"   : "u_val('mana')",
    "STAMINA": "u_val('stamina')",
    "NONE"   : undefined,
}

/**处理角色技能 */
export async function createCharSkill(dm:DataManager,charName:string){
    const {defineData,outData,charConfig} = await dm.getCharData(charName);
    const skills = (charConfig.skill??[]).sort((a,b)=>(b.weight??0)-(a.weight??0));
    const skillDataList:JObject[] = [];

    //全局冷却事件
    const GCDEoc=genActEoc(`${charName}_CoCooldown`,
        [{math:[gcdValName,"-=","1"]}],
        {math:[gcdValName,">","0"]});
    dm.addCharEvent(charName,"Update",0,GCDEoc);
    skillDataList.push(GCDEoc);


    //遍历技能
    for(const skill of skills){
        //替换变量字段
        //skill.spell = JSON.parse(JSON.stringify(skill.spell)
        //    .replace(/(\{\{.*?\}\})/g,(match,p1)=>getFieldVarID(p1)));

        const {cast_condition,spell,extra_effect,cooldown,common_cooldown,audio,require_field,after_effect,before_effect,require_weapon_flag,require_weapon_category,require_unarmed,spec_effect} = skill;

        //法术消耗字符串
        const spellCost = `min(${spell.base_energy_cost??0}+${spell.energy_increment??0}*`+
            `u_val('spell_level', 'spell: ${spell.id}'),${spell.final_energy_cost??999999})`;
        //法术消耗变量类型
        const costType = spell.energy_source !== undefined
            ? costMap[spell.energy_source]
            : undefined;

        //修正子法术
        const extraEffects = extra_effect??[];

        //生成冷却变量名
        const cdValName = `u_${spell.id}_cooldown`;

        //计算成功效果
        const TEffect:EocEffect[]=[];
        if(common_cooldown!=0)
            TEffect.push({math:[gcdValName,"=",`${common_cooldown??1}`]});
        if(spell.base_energy_cost!=undefined && costType!=undefined)
            TEffect.push({math:[costType,"-=",spellCost]});
        if(cooldown)
            TEffect.push({math:[cdValName,"=",`${cooldown??0}`]});
        if(audio){
            TEffect.push(...audio.map(audioObj=>{
                if(typeof audioObj == "string")
                    return parseAudioString(charName,audioObj);
                //冷却变量ID
                const cdid = `audio_${audioObj.id}_cooldown`;
                if(audioObj.cooldown){
                    //冷却
                    const cdeoc=genActEoc(cdid,[{math:[cdid,"-=","1"]}],{math:[cdid,">","0"]});
                    dm.addCharEvent(charName,"CnpcBattleUpdate",0,cdeoc);
                    skillDataList.push(cdeoc);
                    //初始化
                    const initeoc=genActEoc(cdid+"_init",[{math:[cdid,"=","0"]}]);
                    dm.addCharEvent(charName,"CnpcEnterBattle",0,initeoc);
                    skillDataList.push(initeoc);
                }
                const effect:EocEffect = {
                    run_eocs:{
                        id:genEOCID(`${charName}_${audioObj.id}_Chance`),
                        eoc_type:"ACTIVATION",
                        condition:{and:[
                            {one_in_chance:audioObj.one_in_chance??1},
                            {math:[cdid,"<=","0"]}
                        ]},
                        effect:[
                            parseAudioString(charName,audioObj.id,audioObj.volume),
                            {math:[cdid,"=",(audioObj.cooldown??0)+""]}
                        ],
                    }
                };
                return effect;
            }));
        }
        if(after_effect)
            TEffect.push(...after_effect);
        if(spell.base_casting_time){
            const ct = parseSpellNumObj(spell,"base_casting_time");
            TEffect.push(
                {math:[SPELL_CT_MODMOVE_VAR,"=",ct]},
                {u_cast_spell:{id:SPELL_CT_MODMOVE,hit_self:true}}
            );
        }

        //计算准备效果
        const PreEffect:EocEffect[] = [];
        if(before_effect)
            PreEffect.push(...before_effect)

        //遍历释放条件
        const ccs = Array.isArray(cast_condition)
            ?cast_condition
            :[cast_condition] as const;

        for(const castCondition of ccs){
            const {target} = castCondition;
            //计算基础条件
            const baseCond:BoolObj[] = [
                {math:[gcdValName,"<=","0"]},
                {math:[getDisableSpellVar("u",spell),"!=","1"]}
            ];
            if(spell.base_energy_cost!=undefined && costType!=undefined)
                baseCond.push({math:[costType,">=",spellCost]});
            if(cooldown)
                baseCond.push({math:[cdValName,"<=","0"]});
            if(require_field){
                let fdarr = typeof require_field == "string"
                    ? [require_field,1] as const : require_field;
                baseCond.push({math:[`u_${fdarr[0]}`,">=",fdarr[1]+""]});
            }
            //对所有武器要求进行 或 处理
            const requireWeaponCond:BoolObj[] = [];
            if(require_weapon_flag)
                requireWeaponCond.push(...require_weapon_flag.map(id=>
                    ({u_has_wielded_with_flag:id})));
            if(require_weapon_category)
                requireWeaponCond.push(...require_weapon_category.map(id=>
                    ({u_has_wielded_with_weapon_category:id})));
            if(require_unarmed)
                requireWeaponCond.push({not:"u_has_weapon"});
            if(requireWeaponCond.length>0)
                baseCond.push({or:requireWeaponCond})

            //处理并加入输出
            const dat:BaseSkillCastData = {
                skill,
                TEffect,
                PreEffect,
                baseCond,
                castCondition,
                extraEffects,
            }
            let specindex = 0;
            for(const spec of spec_effect??[])
                SpecProcMap[spec.type](dm,charName,dat,spec,specindex++);
            skillDataList.push(...ProcMap[target??"auto"](dm,charName,dat));
        }
        dm.addSharedRes(spell.id,spell,"common_resource","common_spell");
        for(const exspell of extraEffects)
            dm.addSharedRes(exspell.id,exspell,"common_resource","common_spell");
        //冷却事件
        if(cooldown!=null){
            const CDEoc=genActEoc(`${charName}_${spell.id}_cooldown`,
                [{math:[cdValName,"-=","1"]}],
                {math:[cdValName,">","0"]})
            dm.addCharEvent(charName,"Update",0,CDEoc);
            skillDataList.push(CDEoc);
        }
    }

    outData['skill'] = skillDataList;
}

/**处理方式表 */
const ProcMap:Record<TargetType,(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData)=>JObject[]>={
    "auto"          : autoProc,
    "random"        : randomProc,
    "spell_target"  : spell_targetProc,
    "reverse_hit"   : reverse_hitProc,
    "direct_hit"    : direct_hitProc,
    "auto_hit"      : auto_hitProc,
    "filter_random" : filter_randomProc,
}

/**基础技能数据 */
type BaseSkillCastData=Readonly<{
    /**技能 */
    skill:CharSkill;
    /**基础释放eoc条件 */
    baseCond:BoolObj[];
    /**基础成功eoc效果 */
    TEffect:EocEffect[];
    /**基础准备释放Eoc */
    PreEffect:EocEffect[];
    /**释放条件 */
    castCondition:CastCondition;
    /**子法术 */
    extraEffects:Spell[];
}>

//获取施法方式的uid
function castCondUid(cc:CastCondition){
    return `${cc.hook}_${cc.target??"auto"}`;
}
//翻转u与n
function revTalker(obj:JToken):any{
    let str = JSON.stringify(obj);
    str = str.replace(/"u_(\w+?)":/g, '"tmpnpctmp_$1":');
    str = str.replace(/(?<!\w)u_/g, 'tmpntmp_');

    str = str.replace(/"npc_(\w+?)":/g, '"u_$1":');
    str = str.replace(/(?<!\w)n_/g, 'u_');

    str = str.replace(/tmpnpctmp_/g, 'npc_');
    str = str.replace(/tmpntmp_/g, 'n_');

    //修正无参条件
    const npcond = NoParamTalkerCondList.join('|');
    const regex = new RegExp(`"n_(${npcond})"`,'g');
    str = str.replace(regex,`"npc_$1"`);
    return JSON.parse(str);
}
/**命中自身的法术变体 */
function hitselfSpell(spell:Spell):Spell{
    const rspell = UtilFunc.deepClone(spell);
    rspell.name = `${spell.name}_hitself`;
    rspell.id = `${rspell.id}_hitself` as SpellID;
    if(!rspell.valid_targets.includes("self"))
        rspell.valid_targets.push("self");
    return rspell;
}
/**解析NumObj为math表达式 */
function parseNumObj(value:any){
    let strExp = `0`;
    if(value!==undefined){
        if(typeof value == "number")
            strExp = value+"";
        else if(typeof value == "object" && "math" in value)
            strExp = value.math[0];
        else throw `伤害解析只支持固定值number 或 math表达式`
    }
    return strExp;
}
/**解析法术伤害字符串 */
function parseSpellNumObj(spell:Spell,field:keyof Spell){
    return parseNumObj(spell[field]);
}
/**将法术数据转为全局变量
 * 返回 预先计算全局变量的effect
 */
function fixSpellDmg(spell:Spell):EocEffect[]{
    const dmgstr = parseSpellNumObj(spell,"min_damage");
    const dotstr = parseSpellNumObj(spell,"min_dot");
    const durstr = parseSpellNumObj(spell,"min_duration");

    const dmgvar = `${spell.id}_dmg`;
    if(spell.min_damage){
        spell.min_damage = {math:[dmgvar]};
        spell.max_damage = SPELL_MAX_DAMAGE;
    }
    const dotvar = `${spell.id}_dot`;
    if(spell.min_dot){
        spell.min_dot = {math:[dotvar]};
        spell.max_dot = SPELL_MAX_DAMAGE;
    }
    const durvar = `${spell.id}_dur`;
    if(spell.min_duration){
        spell.min_duration = {math:[durvar]};
        spell.max_duration = SPELL_MAX_DAMAGE;
    }

    return [
        {math: [dmgvar , `=` , dmgstr]},
        {math: [dotvar , `=` , dotstr]},
        {math: [durvar , `=` , durstr]},
    ];
}

function genCastEocID(charName:string,spell:Spell,ccuid:string):EocID{
    return genEOCID(`${charName}_Cast${spell.id}_${ccuid}`);
}
function genTrueEocID(charName:string,spell:Spell,ccuid:string):EocID{
    return genEOCID(`${charName}_${spell.id}TrueEoc_${ccuid}`)
}


function spell_targetProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    const {skill,baseCond,TEffect,castCondition,PreEffect,extraEffects} = baseSkillData;
    const {spell,one_in_chance} = skill;
    const {hook} = castCondition;
    if(castCondition.condition) baseCond.push(castCondition.condition);
    const ccuid = castCondUid(castCondition);

    //加入子效果
    if(extraEffects.length>0){
        spell.extra_effects=spell.extra_effects??[];
        spell.extra_effects.push(...extraEffects.map(spell=>({id:spell.id})))
    }

    //创建瞄准法术标靶的辅助索敌法术
    const flags:SpellFlag[] = ["WONDER","RANDOM_TARGET",...CON_SPELL_FLAG];
    if(spell.flags?.includes("IGNORE_WALLS"))
        flags.push("IGNORE_WALLS")
    const {min_aoe,max_aoe,aoe_increment,
        min_range,max_range,range_increment,
        max_level,shape} = spell;
    const selTargetSpell:Spell = {
        id:genSpellID(`${spell.id}_SelTarget`),
        type:"SPELL",
        name:spell.name+"_索敌",
        description:`${spell.name}的辅助索敌法术`,
        effect:"attack",
        min_damage: 1,
        max_damage: 1,
        valid_targets:["hostile"],
        targeted_monster_ids:[TARGET_MON_ID],
        min_aoe,max_aoe,aoe_increment,
        min_range,max_range,range_increment,
        shape,max_level,flags,
        extra_effects:[{id:spell.id}],
    }
    dm.addSharedRes(selTargetSpell.id,selTargetSpell,"common_resource","common_spell_assist");

    //创建施法EOC
    const castEoc:Eoc={
        type:"effect_on_condition",
        id:genCastEocID(charName,spell,ccuid),
        eoc_type:"ACTIVATION",
        effect:[
            ...PreEffect,
            {
                u_cast_spell:{
                    id:selTargetSpell.id,
                    once_in:one_in_chance,
                },
                targeted: true,
                true_eocs:{
                    id:genTrueEocID(charName,spell,ccuid),
                    effect:[...TEffect],
                    eoc_type:"ACTIVATION",
                }
            }
        ],
        condition:{and:[...baseCond]},
    }

    //加入触发
    if(CnpcReverseEventTypeList.includes(hook as any)){
        console.log(skill);
        throw `翻转事件只能应用于翻转命中`
    }
    dm.addCharEvent(charName,hook as CnpcEventType,0,castEoc);

    return [castEoc];
}

function randomProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    const {skill,baseCond,TEffect,castCondition,PreEffect,extraEffects} = baseSkillData;
    const {spell,one_in_chance} = skill;
    const {hook} = castCondition;
    if(castCondition.condition) baseCond.push(castCondition.condition);
    const ccuid = castCondUid(castCondition);

    //加入子效果
    if(extraEffects.length>0){
        spell.extra_effects=spell.extra_effects??[];
        spell.extra_effects.push(...extraEffects.map(spell=>({id:spell.id})))
    }

    //创建施法EOC
    const castEoc:Eoc={
        type:"effect_on_condition",
        id:genCastEocID(charName,spell,ccuid),
        eoc_type:"ACTIVATION",
        effect:[
            ...PreEffect,
            {
                u_cast_spell:{
                    id:spell.id,
                    once_in:one_in_chance,
                },
                targeted: false,
                true_eocs:{
                    id:genTrueEocID(charName,spell,ccuid),
                    effect:[...TEffect],
                    eoc_type:"ACTIVATION",
                }
            }
        ],
        condition:{and:[...baseCond]},
    }

    //加入触发
    if(CnpcReverseEventTypeList.includes(hook as any)){
        console.log(skill);
        throw `翻转事件只能应用于翻转命中`
    }
    dm.addCharEvent(charName,hook as CnpcEventType,0,castEoc);

    return [castEoc];
}



function reverse_hitProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    let {skill,baseCond,TEffect,castCondition,PreEffect,extraEffects} = baseSkillData;
    const {spell,one_in_chance} = skill;
    const {hook} = castCondition;
    if(castCondition.condition) baseCond.push(castCondition.condition);
    const ccuid = castCondUid(castCondition);


    //复制法术
    const rspell = hitselfSpell(spell);
    //解析伤害字符串
    let dmgPreEff = fixSpellDmg(rspell);
    dm.addSharedRes(rspell.id,rspell,"common_resource","common_spell_assist");

    //加入子效果
    if(extraEffects.length>0){
        spell.extra_effects=spell.extra_effects??[];
        spell.extra_effects.push(...extraEffects.map(spell=>({id:spell.id})))
    }
    for(const exspell of extraEffects){
        const rexspell = hitselfSpell(exspell);
        rspell.extra_effects=rspell.extra_effects??[];
        rspell.extra_effects.push({id:rexspell.id});
        dmgPreEff.push(...fixSpellDmg(rexspell))
        dm.addSharedRes(rexspell.id,rexspell,"common_resource","common_spell_assist");
    }


    //翻转u与n
    baseCond = revTalker(baseCond);
    TEffect = revTalker(TEffect);
    PreEffect = revTalker(PreEffect);
    dmgPreEff = revTalker(dmgPreEff);

    //创建翻转的施法EOC
    const castEoc:Eoc={
        type:"effect_on_condition",
        id:genCastEocID(charName,rspell,ccuid),
        eoc_type:"ACTIVATION",
        effect:[
            ...PreEffect,
            ...dmgPreEff,//预先计算伤害
            {
                u_cast_spell:{
                    id:rspell.id,
                    once_in:one_in_chance,
                    hit_self:true              //如果是翻转事件则需命中自身
                },
                true_eocs:{
                    id:genTrueEocID(charName,rspell,ccuid),
                    effect:[...TEffect],
                    eoc_type:"ACTIVATION",
                }
            }
        ],
        condition:{and:[...baseCond]},
    }

    //加入触发
    if(CnpcEventTypeList.includes(hook as any))
        throw `翻转命中 所用的事件必须为 翻转事件: ${CnpcReverseEventTypeList}`
    dm.addReverseCharEvent(charName,hook as CnpcReverseEventType,0,castEoc);

    return [castEoc];
}

function filter_randomProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    let {skill,baseCond,TEffect,castCondition,PreEffect,extraEffects} = baseSkillData;
    const {spell,one_in_chance} = skill;
    const {hook} = castCondition;
    const ccuid = castCondUid(castCondition);

    //复制法术
    const rspell = hitselfSpell(spell);
    //解析伤害字符串
    let dmgPreEff = fixSpellDmg(rspell);
    dm.addSharedRes(rspell.id,rspell,"common_resource","common_spell_assist");

    //加入子效果
    if(extraEffects.length>0){
        spell.extra_effects=spell.extra_effects??[];
        spell.extra_effects.push(...extraEffects.map(spell=>({id:spell.id})))
    }
    for(const exspell of extraEffects){
        const rexspell = hitselfSpell(exspell);
        rspell.extra_effects=rspell.extra_effects??[];
        rspell.extra_effects.push({id:rexspell.id});
        dmgPreEff.push(...fixSpellDmg(rexspell));
        dm.addSharedRes(rexspell.id,rexspell,"common_resource","common_spell_assist");
    }

    //翻转u与n
    const unrbaseCond = UtilFunc.deepClone(baseCond);
    if(castCondition.condition) baseCond.push(castCondition.condition);
    baseCond = revTalker(baseCond);
    TEffect = revTalker(TEffect);
    PreEffect = revTalker(PreEffect);
    dmgPreEff =revTalker(dmgPreEff);

    //命中id
    const fhitvar = `${rspell.id}_hasTarget`;

    //创建翻转的施法EOC
    const castEoc:Eoc={
        type:"effect_on_condition",
        id:genCastEocID(charName,rspell,ccuid),
        eoc_type:"ACTIVATION",
        effect:[
            ...PreEffect,
            ...dmgPreEff,//预先计算伤害
            {
                u_cast_spell:{
                    id:rspell.id,
                    once_in:one_in_chance,
                    hit_self:true              //如果是翻转事件则需命中自身
                },
                true_eocs:{
                    id:genTrueEocID(charName,rspell,ccuid),
                    effect:[...TEffect,{math:[fhitvar,"=","1"]}],
                    eoc_type:"ACTIVATION",
                }
            }
        ],
        condition:{and:[
            ...baseCond,
            {math:[fhitvar,"!=","1"]},
        ]},
    }


    //创建筛选目标的辅助索敌法术
    const flags:SpellFlag[] = [...CON_SPELL_FLAG];
    if(spell.flags?.includes("IGNORE_WALLS"))
        flags.push("IGNORE_WALLS")
    const {min_range,max_range,range_increment,
        max_level,valid_targets,targeted_monster_ids} = spell;
    const filterTargetSpell:Spell = {
        id:genSpellID(`${charName}_${rspell.id}_FilterTarget_${ccuid}`),
        type:"SPELL",
        name:rspell.name+"_筛选索敌",
        description:`${rspell.name}的筛选索敌法术`,
        effect:"effect_on_condition",
        effect_str:castEoc.id,
        flags,
        shape:"blast",
        min_aoe:min_range,
        max_aoe:max_range,
        aoe_increment:range_increment,
        max_level,targeted_monster_ids,
        valid_targets:valid_targets.filter(item=>item!="ground"),
    }

    //创建释放索敌法术的eoc
    const castSelEoc:Eoc = {
        type:"effect_on_condition",
        id:genEOCID(`Cast${filterTargetSpell.id}`),
        eoc_type:"ACTIVATION",
        effect:[
            {
                u_cast_spell:{
                    id:filterTargetSpell.id,
                    once_in:one_in_chance,
                }
            },
            {math:[fhitvar,"=","0"]}
        ],
        condition:{and:[...unrbaseCond]},
    }

    //加入触发
    if(CnpcReverseEventTypeList.includes(hook as any)){
        console.log(skill);
        throw `翻转事件只能应用于翻转命中`
    }
    dm.addCharEvent(charName,hook as CnpcEventType,0,castSelEoc);

    return [castEoc,castSelEoc,filterTargetSpell];
}

function direct_hitProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    const {skill,baseCond,TEffect,castCondition,PreEffect,extraEffects} = baseSkillData;
    const {spell,one_in_chance} = skill;
    const {hook} = castCondition;
    if(castCondition.condition) baseCond.push(castCondition.condition);
    const ccuid = castCondUid(castCondition);

    //复制法术
    const rspell = hitselfSpell(spell);
    //解析伤害字符串
    const dmgPreEff = fixSpellDmg(rspell);
    dm.addSharedRes(rspell.id,rspell,"common_resource","common_spell_assist");

    //加入子效果
    if(extraEffects.length>0){
        spell.extra_effects=spell.extra_effects??[];
        spell.extra_effects.push(...extraEffects.map(spell=>({id:spell.id})))
    }
    for(const exspell of extraEffects){
        const rexspell = hitselfSpell(exspell);
        rspell.extra_effects=rspell.extra_effects??[];
        rspell.extra_effects.push({id:rexspell.id});
        dmgPreEff.push(...fixSpellDmg(rexspell));
        dm.addSharedRes(rexspell.id,rexspell,"common_resource","common_spell_assist");
    }

    //创建翻转的施法EOC
    const castEoc:Eoc={
        type:"effect_on_condition",
        id:genCastEocID(charName,rspell,ccuid),
        eoc_type:"ACTIVATION",
        effect:[
            ...PreEffect,
            ...dmgPreEff,//预先计算伤害
            {
                npc_cast_spell:{
                    id:rspell.id,
                    once_in:one_in_chance,
                    hit_self:true              //如果是翻转事件则需命中自身
                },
                true_eocs:{
                    id:genTrueEocID(charName,rspell,ccuid),
                    effect:[...TEffect],
                    eoc_type:"ACTIVATION",
                }
            }
        ],
        condition:{and:[...baseCond]},
    }

    //加入触发
    if(!CnpcInteractiveEventList.includes(hook as any))
        throw `直接命中 所用的事件必须为 交互事件: ${CnpcInteractiveEventList}`
    dm.addCharEvent(charName,hook as CnpcEventType,0,castEoc);

    return [castEoc];
}

function autoProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    const {skill,castCondition} = baseSkillData;
    const {spell} = skill;
    const {hook} = castCondition;
    //判断瞄准方式
    //是敌对目标法术
    const isHostileTarget = spell.valid_targets.includes("hostile");
    const isAllyTarget    = spell.valid_targets.includes("ally");
    //是Aoe法术
    const isAoe = (spell.min_aoe!=null && spell.min_aoe!=0) ||
        (spell.aoe_increment!=null && spell.aoe_increment!=0);

    //有释放范围
    const hasRange = (spell.min_range!=null && spell.min_range!=0) ||
        (spell.range_increment!=null && spell.range_increment!=0);

    //aoe 有范围 敌对目标 法术将使用法术标靶
    if(isHostileTarget && isAoe && hasRange)
        return ProcMap.spell_target(dm,charName,baseSkillData);

    //有范围 有条件 友方目标 法术适用筛选命中
    if(isAllyTarget && hasRange && castCondition.condition!=undefined)
        return ProcMap.filter_random(dm,charName,baseSkillData);

    //非aoe hook为互动事件 敌对目标 法术将直接命中
    if((CnpcReverseEventTypeList.includes(hook as any)  ||
        CnpcInteractiveEventList.includes(hook as any)) &&
        isHostileTarget && !isAoe)
        return ProcMap.auto_hit(dm,charName,baseSkillData);

    //其他法术随机
    return ProcMap.random(dm,charName,baseSkillData);
}

function auto_hitProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    const {skill,castCondition} = baseSkillData;
    const {hook} = castCondition;
    if(CnpcReverseEventTypeList.includes(hook as any))
        return ProcMap.reverse_hit(dm,charName,baseSkillData);
    if(CnpcInteractiveEventList.includes(hook as any))
        return ProcMap.direct_hit(dm,charName,baseSkillData);
    throw `auto_hitProc 的hook 必须为 翻转事件:${CnpcReverseEventTypeList}\n或互动事件:&{InteractiveCharEventList}`;
}