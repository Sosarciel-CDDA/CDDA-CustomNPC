import * as crypto from "crypto";
import { JToken } from "./UtilInterfaces";

/**常用函数 */
export namespace UtilFunc{
/**获取当前时间戳
 * number ()
 * @returns {number} 时间戳
 */
export function getTime(): number {
    return new Date().getTime();
}

/**初始化对象的字段
 * void (Object,string,any)
 * @param {Record<string,T>} obj   - 所要初始化的对象
 * @param {string} field 		   - 所要初始化的字段
 * @param {T} defaultVal 		   - 默认值
 * @returns {T} - 最终值
 */
export function initField<T>(
    obj: Record<string, T>,
    field: string,
    defaultVal: T
): T {
    if (!(field in obj)) obj[field] = defaultVal;
    return obj[field];
}

/**生成一串uuid
 * string ()
 * @returns {string} uuid
 */
export function genUUID() {
    return crypto.randomBytes(16).toString("hex");
}
/**计算Hash
 * string ()
 * @param {string} str - 待计算的字符串
 * @returns {string} hash
 */
export function calcHash(str:string) {
    return crypto.createHash('md5').update(str).digest('hex');
}

/**深克隆 序列化并反序列化
 * @template {T} T - JToken类型的泛型
 * @param {T} obj - 克隆目标
 * @returns {T}   克隆结果
 */
export function deepClone<T extends JToken>(obj: T): T {
    return JSON.parse(JSON.stringify(obj));
}

/**是否为安全的数字
 * @param {number} num - 所要检测的数字
 * @returns {boolean} 是否安全
 */
export function isSafeNumber(num: number): boolean {
    if (num === undefined || num == null || isNaN(num)) return false;
    if(typeof num === 'number') return true;
    return false;
}

/**等待 timeMs 毫秒
 * @async
 * @param {number} timeMs - 等待的毫秒数
 * @returns {Promise<boolean>}
 */
export async function sleep(timeMs: number): Promise<boolean> {
    return new Promise(function (resolve, rejecte) {
        let timer = setTimeout(function () {
            resolve(true);
        }, timeMs);
    });
}
}

