import { SLogger } from "./UtilLogger";


/**用于打印方法的调用
 * @returns {void}
 */
export function DLogger(){
    return function (target:any, propertyKey:string, descriptor:PropertyDescriptor){
        const originalMethod = descriptor.value;
        descriptor.value = function(...args:any[]){
            let result = originalMethod.apply(this, args);
            SLogger.info(`Call: ${propertyKey}(${args}) => ${result}`);
            return result;
        }
    }
}

/**用于打印异步方法的调用
 * @returns {void}
 */
export function DLoggerAsync(){
    return function (target:any, propertyKey:string, descriptor:PropertyDescriptor){
        const originalMethod = descriptor.value;
        descriptor.value = async function(...args:any[]){
            let result = await originalMethod.apply(this, args);
            SLogger.info(`Call: ${propertyKey}(${args}) => ${result}`);
            return result;
        }
    }
}

/**用于捕获方法中的错误
 * @returns {void}
 */
export function DCatchErrors() {
    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = function (...args: any[]) {
            try {
                originalMethod.apply(this, args);
            } catch (err) {
                SLogger.warn(`Error in method ${propertyKey}: ${err}`);
            }
        };
    };
}

/**用于捕获异步方法中的错误
 * @returns {void}
 */
export function DCatchErrorsAsync() {
    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = async function (...args: any[]) {
            try {
                await originalMethod.apply(this, args);
            } catch (err) {
                SLogger.warn(`Error in method ${propertyKey}: ${err}`);
            }
        };
    };
}
