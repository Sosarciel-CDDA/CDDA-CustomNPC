import * as he from 'html-entities';
import {get_encoding,Tiktoken} from 'tiktoken';



/**编码/解码器 */
export namespace UtilCodec{


let encoderTurbo:Tiktoken|null = null;
let encoderDavinci:Tiktoken|null = null;
const textDecoder = new TextDecoder();

// 定义一个对象，存储常见的HTML实体和对应的字符
let htmlEntities:Record<string,string> = {
    "&lt;": "<",
    "&gt;": ">",
    "&amp;": "&",
    "&quot;": "\"",
    "&#39;": "'",
    "&#91;": "[",
    "&#93;": "]"
};

/**HTML实体解码 将一个字符串中的HTML实体转换为对应的字符
 * @param {string} str - 要转换的字符串
 * @returns {string} 转换后的字符串
 */
export function decodeHtmlEntities(str:string) {
    //for(let code in htmlEntities){
	//	let cha = htmlEntities[code]
	//	str = str.replaceAll(code, cha);
	//}
	//return str
    return he.decode(str);
}

/**HTML实体编码 将一个字符串中的 需编码字符转换为 HTML实体
 * @param {string} str - 要转换的字符串
 * @returns {string} 转换后的字符串
 */
export function encodeHtmlEntities(str:string) {
    //for(let code in htmlEntities){
	//	let cha = htmlEntities[code]
	//	str = str.replaceAll(cha, code);
	//}
	//return str
    return he.encode(str);
}


//token长度计算器
//cl100k_base	ChatGPT models, text-embedding-ada-002
//p50k_base	Code models, text-davinci-002, text-davinci-003
//r50k_base (or gpt2)	GPT-3 models like davinci


//避免在nextjs调用时出错
function initTikTokenEncoder (){
	if(encoderTurbo!=null && encoderDavinci!=null)
		return;

	encoderTurbo = get_encoding("cl100k_base");
	encoderDavinci = get_encoding("p50k_base");
}

/**token长度计算器 Turbo模型
 * @param {string} str = 所要计算的消息
 * @returns {number} 整数长度结果
 */
export function tokenNumTurbo(str:string):number{
	initTikTokenEncoder();
	//return encoder.encode(str).length
	return encoderTurbo?.encode(str).length as any as number;
}
/**token长度计算器 Davinci模型
 * @param {string} str = 所要计算的消息
 * @returns {number} 整数长度结果
 */
export function tokenNumDavinci(str:string):number{
	initTikTokenEncoder();
	return encoderDavinci?.encode(str).length as any as number;
}

/**token编码 Turbo模型
 * @param {string} str = 所要计算的消息
 * @returns {Array<number>} Token数组
 */
export function encodeTokenTurbo(str:string):Uint32Array{
	initTikTokenEncoder();
	return encoderTurbo?.encode(str) as any as Uint32Array
}
/**token编码 Davinci模型
 * @param {string} str = 所要计算的消息
 * @returns {Array<number>} Token数组
 */
export function encodeTokenDavinci(str:string):Uint32Array{
	initTikTokenEncoder();
	return encoderDavinci?.encode(str) as any as Uint32Array;
}
/**token解码 Turbo模型
 * @param {Array<number>} arr = Token数组
 * @returns {string} 消息字符串
 */
export function decodeTokenTurbo(arr:Uint32Array):string{
	initTikTokenEncoder();
	return textDecoder.decode(encoderTurbo?.decode(arr));
}
/**token解码 Davinci模型
 * @param {Array<number>} arr = Token数组
 * @returns {string} 消息字符串
 */
export function decodeTokenDavinci(arr:Uint32Array):string{
	initTikTokenEncoder();
	return textDecoder.decode(encoderDavinci?.decode(arr));
}

}