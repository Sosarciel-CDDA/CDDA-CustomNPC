import { JObject, stringifyJToken } from "./UtilInterfaces";
import * as https from 'https';
import * as http from 'http';
import { SLogger } from "./UtilLogger";


/**网络工具 */
export namespace UtilCom{

function sPost(type:"http"|"https",json:JObject,options:Object,timeLimit:number=-1):Promise<JObject|null>{
    //转换为毫秒
    const hasTimeLimit = (timeLimit>=10);
    if(hasTimeLimit)
        timeLimit*=1000

    const jsonStr = stringifyJToken(json);
    const funcName = "s"+type+"Psot";

    return new Promise((resolve, rejecte)=>{
        const resFunc = (res:http.IncomingMessage)=>{
            try{
                //请求超时
                if(hasTimeLimit){
                    res.setTimeout(timeLimit, ()=>{
                        //res.abort();
                        throw funcName+" 接收反馈超时: "+timeLimit+" ms";
                    });
                }

                let resdata = "";
                res.setEncoding('utf8');
                res.on('data',(chunk)=>resdata+=chunk);

                res.on('error',(e)=>{
                    throw funcName+" 接收反馈错误:"+e;
                });

                res.on('end',()=>{
                    if(resdata=="")
                        throw funcName+" 接收反馈错误: resdata 为空";
                    try{
                        let obj = JSON.parse(resdata);
                        SLogger.http(funcName+" 接受信息:",obj);
                        resolve(obj);
                        return;
                    }
                    catch(e){
                        throw funcName+" 接收反馈错误:"+e+"\n原始字符串:"+resdata;
                    }
                });
            }catch(err){
                if(typeof err != "string")
                    throw err;
                SLogger.warn(err);
                resolve(null);
                return;
            }

        };
        //路由 http/https
        let req:http.ClientRequest=null as any as http.ClientRequest;
        if(type === "https")
            req = https.request(options, resFunc);
        else if(type === "http")
            req = http.request(options, resFunc);

        //请求超时
        if(hasTimeLimit){
            req.setTimeout(timeLimit, ()=>{
                SLogger.warn(funcName+" 发送请求超时: "+timeLimit+" ms");
                req.destroy();
            });
        }

        req.on('error', (e)=>{
            SLogger.warn(funcName+" 发送请求错误:"+e);
            resolve(null);
        });

        req.write(jsonStr);
        req.end();
    });
}

/**发送一个POST请求并接受数据
 * Object ()
 * @async
 * @param {JObject} json 	   - 数据对象
 * @param {Object} options     - 参数对象
 * @param {number} [timeLimit] - 超时时间/秒  最小为10秒
 * @returns {Promise<Object|null>} 结果 null 为未能成功接收
 */
export function shttpsPost(json:JObject,options:Object,timeLimit:number=-1):Promise<JObject|null>{
    return sPost("https",json,options,timeLimit);
}

/**发送一个POST请求并接受数据
 * Object ()
 * @async
 * @param {JObject} json 	   - 数据对象
 * @param {Object} options     - 参数对象
 * @param {number} [timeLimit] - 超时时间/秒  最小为10秒
 * @returns {Promise<Object|null>} 结果 null 为未能成功接收
 */
export function shttpPost(json:JObject,options:Object,timeLimit:number=-1):Promise<JObject|null>{
    return sPost("http",json,options,timeLimit);
}
}