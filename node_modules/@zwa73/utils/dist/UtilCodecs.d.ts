/**编码/解码器 */
export declare namespace UtilCodec {
    /**HTML实体解码 将一个字符串中的HTML实体转换为对应的字符
     * @param {string} str - 要转换的字符串
     * @returns {string} 转换后的字符串
     */
    function decodeHtmlEntities(str: string): string;
    /**HTML实体编码 将一个字符串中的 需编码字符转换为 HTML实体
     * @param {string} str - 要转换的字符串
     * @returns {string} 转换后的字符串
     */
    function encodeHtmlEntities(str: string): string;
    /**token长度计算器 Turbo模型
     * @param {string} str = 所要计算的消息
     * @returns {number} 整数长度结果
     */
    function tokenNumTurbo(str: string): number;
    /**token长度计算器 Davinci模型
     * @param {string} str = 所要计算的消息
     * @returns {number} 整数长度结果
     */
    function tokenNumDavinci(str: string): number;
    /**token编码 Turbo模型
     * @param {string} str = 所要计算的消息
     * @returns {Array<number>} Token数组
     */
    function encodeTokenTurbo(str: string): Uint32Array;
    /**token编码 Davinci模型
     * @param {string} str = 所要计算的消息
     * @returns {Array<number>} Token数组
     */
    function encodeTokenDavinci(str: string): Uint32Array;
    /**token解码 Turbo模型
     * @param {Array<number>} arr = Token数组
     * @returns {string} 消息字符串
     */
    function decodeTokenTurbo(arr: Uint32Array): string;
    /**token解码 Davinci模型
     * @param {Array<number>} arr = Token数组
     * @returns {string} 消息字符串
     */
    function decodeTokenDavinci(arr: Uint32Array): string;
}
