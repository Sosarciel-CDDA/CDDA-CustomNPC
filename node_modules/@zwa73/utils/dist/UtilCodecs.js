"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UtilCodec = void 0;
const he = require("html-entities");
const tiktoken_1 = require("tiktoken");
/**编码/解码器 */
var UtilCodec;
(function (UtilCodec) {
    let encoderTurbo = null;
    let encoderDavinci = null;
    const textDecoder = new TextDecoder();
    // 定义一个对象，存储常见的HTML实体和对应的字符
    let htmlEntities = {
        "&lt;": "<",
        "&gt;": ">",
        "&amp;": "&",
        "&quot;": "\"",
        "&#39;": "'",
        "&#91;": "[",
        "&#93;": "]"
    };
    /**HTML实体解码 将一个字符串中的HTML实体转换为对应的字符
     * @param {string} str - 要转换的字符串
     * @returns {string} 转换后的字符串
     */
    function decodeHtmlEntities(str) {
        //for(let code in htmlEntities){
        //	let cha = htmlEntities[code]
        //	str = str.replaceAll(code, cha);
        //}
        //return str
        return he.decode(str);
    }
    UtilCodec.decodeHtmlEntities = decodeHtmlEntities;
    /**HTML实体编码 将一个字符串中的 需编码字符转换为 HTML实体
     * @param {string} str - 要转换的字符串
     * @returns {string} 转换后的字符串
     */
    function encodeHtmlEntities(str) {
        //for(let code in htmlEntities){
        //	let cha = htmlEntities[code]
        //	str = str.replaceAll(cha, code);
        //}
        //return str
        return he.encode(str);
    }
    UtilCodec.encodeHtmlEntities = encodeHtmlEntities;
    //token长度计算器
    //cl100k_base	ChatGPT models, text-embedding-ada-002
    //p50k_base	Code models, text-davinci-002, text-davinci-003
    //r50k_base (or gpt2)	GPT-3 models like davinci
    //避免在nextjs调用时出错
    function initTikTokenEncoder() {
        if (encoderTurbo != null && encoderDavinci != null)
            return;
        encoderTurbo = (0, tiktoken_1.get_encoding)("cl100k_base");
        encoderDavinci = (0, tiktoken_1.get_encoding)("p50k_base");
    }
    /**token长度计算器 Turbo模型
     * @param {string} str = 所要计算的消息
     * @returns {number} 整数长度结果
     */
    function tokenNumTurbo(str) {
        initTikTokenEncoder();
        //return encoder.encode(str).length
        return encoderTurbo?.encode(str).length;
    }
    UtilCodec.tokenNumTurbo = tokenNumTurbo;
    /**token长度计算器 Davinci模型
     * @param {string} str = 所要计算的消息
     * @returns {number} 整数长度结果
     */
    function tokenNumDavinci(str) {
        initTikTokenEncoder();
        return encoderDavinci?.encode(str).length;
    }
    UtilCodec.tokenNumDavinci = tokenNumDavinci;
    /**token编码 Turbo模型
     * @param {string} str = 所要计算的消息
     * @returns {Array<number>} Token数组
     */
    function encodeTokenTurbo(str) {
        initTikTokenEncoder();
        return encoderTurbo?.encode(str);
    }
    UtilCodec.encodeTokenTurbo = encodeTokenTurbo;
    /**token编码 Davinci模型
     * @param {string} str = 所要计算的消息
     * @returns {Array<number>} Token数组
     */
    function encodeTokenDavinci(str) {
        initTikTokenEncoder();
        return encoderDavinci?.encode(str);
    }
    UtilCodec.encodeTokenDavinci = encodeTokenDavinci;
    /**token解码 Turbo模型
     * @param {Array<number>} arr = Token数组
     * @returns {string} 消息字符串
     */
    function decodeTokenTurbo(arr) {
        initTikTokenEncoder();
        return textDecoder.decode(encoderTurbo?.decode(arr));
    }
    UtilCodec.decodeTokenTurbo = decodeTokenTurbo;
    /**token解码 Davinci模型
     * @param {Array<number>} arr = Token数组
     * @returns {string} 消息字符串
     */
    function decodeTokenDavinci(arr) {
        initTikTokenEncoder();
        return textDecoder.decode(encoderDavinci?.decode(arr));
    }
    UtilCodec.decodeTokenDavinci = decodeTokenDavinci;
})(UtilCodec = exports.UtilCodec || (exports.UtilCodec = {}));
