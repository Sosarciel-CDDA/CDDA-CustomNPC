"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DCatchErrorsAsync = exports.DCatchErrors = exports.DLoggerAsync = exports.DLogger = void 0;
const UtilLogger_1 = require("./UtilLogger");
/**用于打印方法的调用
 * @returns {void}
 */
function DLogger() {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            let result = originalMethod.apply(this, args);
            UtilLogger_1.SLogger.info(`Call: ${propertyKey}(${args}) => ${result}`);
            return result;
        };
    };
}
exports.DLogger = DLogger;
/**用于打印异步方法的调用
 * @returns {void}
 */
function DLoggerAsync() {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = async function (...args) {
            let result = await originalMethod.apply(this, args);
            UtilLogger_1.SLogger.info(`Call: ${propertyKey}(${args}) => ${result}`);
            return result;
        };
    };
}
exports.DLoggerAsync = DLoggerAsync;
/**用于捕获方法中的错误
 * @returns {void}
 */
function DCatchErrors() {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            try {
                originalMethod.apply(this, args);
            }
            catch (err) {
                UtilLogger_1.SLogger.warn(`Error in method ${propertyKey}: ${err}`);
            }
        };
    };
}
exports.DCatchErrors = DCatchErrors;
/**用于捕获异步方法中的错误
 * @returns {void}
 */
function DCatchErrorsAsync() {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = async function (...args) {
            try {
                await originalMethod.apply(this, args);
            }
            catch (err) {
                UtilLogger_1.SLogger.warn(`Error in method ${propertyKey}: ${err}`);
            }
        };
    };
}
exports.DCatchErrorsAsync = DCatchErrorsAsync;
