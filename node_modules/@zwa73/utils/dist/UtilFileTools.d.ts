import { JObject, JToken } from "./UtilInterfaces";
/**文件工具 */
export declare namespace UtilFT {
    /**验证路径 文件或文件夹 是否存在 异步
     * @async
     * @param {string} filePath - 待验证的路径
     * @returns {Promise<boolean>} - 是否存在
     */
    function pathExists(filePath: string): Promise<boolean>;
    /**验证路径 文件或文件夹 是否存在 同步
     * @param {string} filePath - 待验证的路径
     * @returns {boolean} - 是否存在
     */
    function pathExistsSync(filePath: string): boolean;
    /**路径不存在时创建路径 以path.sep结尾时创建文件夹 异步
     * @async
     * @param {string} filePath - 待创建的路径
     * @param {boolean} isDir   - 强制创建一个文件夹
     * @returns {Promise<boolean>} - 是否成功创建
     */
    function createPath(filePath: string, isDir?: boolean): Promise<boolean>;
    /**路径不存在时创建路径 以path.sep结尾时创建文件夹 同步
     * @param {string} filePath - 待创建的路径
     * @param {boolean} isDir   - 强制验证一个文件夹
     * @returns {boolean} - 是否成功创建
     */
    function createPathSync(filePath: string, isDir?: boolean): boolean;
    /**确保路径存在 不存在时创建 异步
     * @async
     * @param {string} filePath - 待验证的路径
     * @param {boolean} isDir   - 强制验证一个文件夹
     * @returns {Promise<boolean>} - 是否成功执行 创建或已存在
     */
    function ensurePathExists(filePath: string, isDir?: boolean): Promise<boolean>;
    /**确保路径存在 不存在时创建 同步
     * @param {string} filePath - 待验证的路径
     * @returns {boolean} - 是否成功执行 创建或已存在
     */
    function ensurePathExistsSync(filePath: string, isDir?: boolean): boolean;
    /**加载json文件 同步
     * Object (string)
     * @param {string} filePath - 文件路径
     * @returns {JObject}       - 加载完成的对象或空{}
     */
    function loadJSONFileSync(filePath: string): JObject;
    /**加载json文件 同步
     * Object (string)
     * @param {string} filePath - 文件路径
     * @param {T}      def      - 默认值
     * @returns {T}             - 加载完成的对象或默认值
     */
    function loadJSONFileSync<T extends JToken>(filePath: string, def: T): T;
    /**加载json文件 异步
     * Object (string)
     * @async
     * @param {string} filePath - 文件路径
     * @returns {Promise<JObject>} - 加载完成的对象或空{}
     */
    function loadJSONFile(filePath: string): Promise<JObject>;
    /**加载json文件 异步
     * Object (string)
     * @async
     * @param {string} filePath - 文件路径
     * @param {T}      T        - 默认值
     * @returns {Promise<T>} - 加载完成的对象或默认值
     */
    function loadJSONFile<T extends JToken>(filePath: string, def: T): Promise<T>;
    /**写入JSON文件
     * void (string,Object)
     * @async
     * @param {string} filePath - 文件路径
     * @param {JToken} token 	    - 所要写入的JToken
     * @returns {Promise<void>}
     */
    function writeJSONFile(filePath: string, token: JToken): Promise<void>;
    /**搜索路径符合正则表达式的文件
     * @param folder - 文件夹路径
     * @param traitRegex - 正则表达式
     * @returns {Record<string, string>} 文件名与路径的映射
     */
    function fileSearch(folder: string, traitRegex: string): Record<string, string>;
}
