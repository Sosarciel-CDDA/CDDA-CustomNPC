import { FfprobeData } from "fluent-ffmpeg";
/**输入输出路径映射
 * 输入路径:输入路径
 */
export type IOMap = {
    [key: string]: string;
};
/**ffmpeg工具类
 */
declare class SFfmpegTool {
    /**静态构造函数
     */
    static init(): void;
    /**设置ffmpeg路径
     */
    static setFfmpegPath(ffmpegPath: string): void;
    /**获取音频文件的元数据
     * @param {string} inputWavPath - 输入音频文件路径
     * @returns {Promise<FfprobeData|null>} - 返回音频文件的元数据
     */
    static getAudioMetaData(inputWavPath: string): Promise<FfprobeData | null>;
    /**flac转ogg
     * @param {string} inputFlacFile - 输入flac文件路径
     * @param {string} outputOggPath - 输出ogg文件路径
     * @param {number} quality - 质量
     */
    static flac2ogg(inputFlacFile: string, outputOggPath: string, quality?: number): Promise<boolean>;
    /**wav转ogg
     * @param {string} inputWavPath - 输入wav文件路径
     * @param {string} outputOggPath - 输出ogg文件路径
     * @param {number} quality - 质量
     */
    static wav2ogg(inputWavPath: string, outputOggPath: string, quality?: number): Promise<boolean>;
    /**剪切音频
     * @param {string} audioPath - 输入音频文件路径
     * @param {string} outPath - 输出音频文件路径
     * @param {number} start - 开始时间
     * @param {number} time - 时长
     */
    static cutAudio(audioPath: string, outPath: string, start: number, time: number): Promise<boolean>;
    /**删除首尾静音
     * @param {string} inputWavPath - 输入wav文件路径
     * @param {string} outputWavPath - 输出wav文件路径
     * @param {number} threshold - 静音阈值/dB
     * @param {number} silence - 保留静音时长
     */
    static trimSilence(inputWavPath: string, outputWavPath: string, threshold?: number, silence?: number): Promise<boolean>;
    /**重采样
     * @param {string} inputWavPath - 输入wav文件路径
     * @param {string} outputWavPath - 输出wav文件路径
     */
    static resample(inputWavPath: string, outputWavPath: string, rate?: number): Promise<boolean>;
    /**wav转ogg多线程
     * @param {IOMap} ioMap - 输入输出路径映射
     * @param {number} quality - 质量
     * @param {number} cpCount - 并发数
     */
    static wav2oggMP(ioMap: IOMap, quality?: number, cpCount?: number): Promise<void>;
    /**flac转ogg多线程
     * @param {IOMap} ioMap - 输入输出路径映射
     * @param {number} quality - 质量
     * @param {number} cpCount - 并发数
     */
    static flac2oggMP(ioMap: IOMap, quality?: number, cpCount?: number): Promise<void>;
    /**删除静音多线程
     * @param {IOMap} ioMap - 输入输出路径映射
     * @param {number} threshold - 静音阈值/dB
     * @param {number} silence - 保留静音时长
     */
    static trimSilenceMP(ioMap: IOMap, threshold?: number, silence?: number, cpCount?: number): Promise<void>;
    /**重采样多线程
     * @param {IOMap} ioMap - 输入输出路径映射
     * @param {number} rate - 采样率
     * @param {number} cpCount - 并发数
     */
    static resampleMP(ioMap: IOMap, rate?: number, cpCount?: number): Promise<void>;
}
export default SFfmpegTool;
export { SFfmpegTool };
