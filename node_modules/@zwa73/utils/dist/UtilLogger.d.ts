/**hrtime所产生的的记录 */
export type HRTimeLog = {
    /**秒数 */
    0: number;
    /**纳秒数 */
    1: number;
};
/**log等级 undefined相当于 silly */
export type LogLevel = "fatal" | "error" | "warn" | "info" | "http" | "verbose" | "debug" | "silly" | undefined;
export declare class SLogger {
    /**获取一个Logger，如不存在则用默认参数创建
     * @param {string} name  - logger的名称 默认default
     * @returns {SLogger}    - 获取的logger
     */
    static getLogger(name?: string): SLogger;
    /**创建Logger
     * @param {string} name             - logger的名称 默认default
     * @param {LogLevel} consoleLevel   - 输出到控制台的最低等级 默认info
     * @param {string} outFloder        - log的输出文件夹路径 如./log/
     * @param {LogLevel} fileLevel      - 输出到文件的最低等级   默认info
     * @returns {SLogger} - 创建完成的logger
     */
    static createLogger(name?: string, consoleLevel?: LogLevel, outFloder?: string, fileLevel?: LogLevel): SLogger;
    private constructor();
    private _logger;
    /**记录Logger的表 */
    private static readonly loggerTable;
    /**记录Logger的表 */
    private static readonly timeTable;
    /**产生一条对应等级的log 返回自身
     * @param {LogLevel} level      - log等级
     * @param {Array<any>} messages - log消息
     * @returns {SLogger} - 自身
     */
    log(level: LogLevel, ...messages: Array<any>): SLogger;
    /**产生一条fatal等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    fatal(...messages: Array<any>): SLogger;
    /**产生一条error等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    error(...messages: Array<any>): SLogger;
    /**产生一条warn等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    warn(...messages: Array<any>): SLogger;
    /**产生一条info等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    info(...messages: Array<any>): SLogger;
    /**产生一条http等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    http(...messages: Array<any>): SLogger;
    /**产生一条verbose等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger} - 自身
     */
    verbose(...messages: Array<any>): SLogger;
    /**产生一条debug等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    debug(...messages: Array<any>): SLogger;
    /**产生一条silly等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    silly(...messages: Array<any>): SLogger;
    /**记录当前时间戳并存入表
     * @param {string} flag     - 记录的命名
     * @returns {HRTimeLog}     - 记录的时间
     */
    time(flag: string): HRTimeLog;
    /**根据之前记录的时间戳计算经过的时间 并输出log
     * @param {string}   flag       - 记录的命名
     * @param {LogLevel|null} level - log等级 ===null时不产生log
     * @returns {string|null}  - 格式化的时间字符串
     */
    timeEnd(flag: string, level?: LogLevel | null): string | null;
    /**名称为default的slogger实例 */
    private static get defaultInstance();
    /**让名称为default的logger 产生一条对应等级的log 返回自身
     * @param {LogLevel} level - log等级
     * @param {Array<any>} messages    - log消息
     * @returns {SLogger}      - 自身
     */
    static log(level: LogLevel, ...messages: Array<any>): SLogger;
    /**让名称为default的logger 产生一条fatal等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    static fatal(...messages: Array<any>): SLogger;
    /**让名称为default的logger 产生一条error等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    static error(...messages: Array<any>): SLogger;
    /**让名称为default的logger 产生一条warn等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    static warn(...messages: Array<any>): SLogger;
    /**让名称为default的logger 产生一条info等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    static info(...messages: Array<any>): SLogger;
    /**让名称为default的logger 产生一条http等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    static http(...messages: Array<any>): SLogger;
    /**让名称为default的logger 产生一条verbose等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    static verbose(...messages: Array<any>): SLogger;
    /**让名称为default的logger 产生一条debug等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    static debug(...messages: Array<any>): SLogger;
    /**让名称为default的logger 产生一条silly等级的log 返回自身
     * @param {Array<any>} messages - log消息
     * @returns {SLogger}   - 自身
     */
    static silly(...messages: Array<any>): SLogger;
    /**让名称为default的logger 记录当前时间戳并存入表
     * @param {string} flag     - 记录的命名
     * @returns {HRTimeLog}     - 记录的时间
     */
    static time(flag: string): HRTimeLog;
    /**让名称为default的logger 根据之前记录的时间戳计算经过的时间 并输出log
     * @param {string}   flag  - 记录的命名
     * @param {LogLevel} level - log等级
     * @returns {void}
     */
    static timeEnd(flag: string, level?: LogLevel): void;
}
