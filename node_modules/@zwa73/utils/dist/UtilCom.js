"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UtilCom = void 0;
const UtilInterfaces_1 = require("./UtilInterfaces");
const https = require("https");
const http = require("http");
const UtilLogger_1 = require("./UtilLogger");
/**网络工具 */
var UtilCom;
(function (UtilCom) {
    function sPost(type, json, options, timeLimit = -1) {
        //转换为毫秒
        const hasTimeLimit = (timeLimit >= 10);
        if (hasTimeLimit)
            timeLimit *= 1000;
        const jsonStr = (0, UtilInterfaces_1.stringifyJToken)(json);
        const funcName = "s" + type + "Psot";
        return new Promise((resolve, rejecte) => {
            const resFunc = (res) => {
                try {
                    //请求超时
                    if (hasTimeLimit) {
                        res.setTimeout(timeLimit, () => {
                            //res.abort();
                            throw funcName + " 接收反馈超时: " + timeLimit + " ms";
                        });
                    }
                    let resdata = "";
                    res.setEncoding('utf8');
                    res.on('data', (chunk) => resdata += chunk);
                    res.on('error', (e) => {
                        throw funcName + " 接收反馈错误:" + e;
                    });
                    res.on('end', () => {
                        if (resdata == "")
                            throw funcName + " 接收反馈错误: resdata 为空";
                        try {
                            let obj = JSON.parse(resdata);
                            UtilLogger_1.SLogger.http(funcName + " 接受信息:", obj);
                            resolve(obj);
                            return;
                        }
                        catch (e) {
                            throw funcName + " 接收反馈错误:" + e + "\n原始字符串:" + resdata;
                        }
                    });
                }
                catch (err) {
                    if (typeof err != "string")
                        throw err;
                    UtilLogger_1.SLogger.warn(err);
                    resolve(null);
                    return;
                }
            };
            //路由 http/https
            let req = null;
            if (type === "https")
                req = https.request(options, resFunc);
            else if (type === "http")
                req = http.request(options, resFunc);
            //请求超时
            if (hasTimeLimit) {
                req.setTimeout(timeLimit, () => {
                    UtilLogger_1.SLogger.warn(funcName + " 发送请求超时: " + timeLimit + " ms");
                    req.destroy();
                });
            }
            req.on('error', (e) => {
                UtilLogger_1.SLogger.warn(funcName + " 发送请求错误:" + e);
                resolve(null);
            });
            req.write(jsonStr);
            req.end();
        });
    }
    /**发送一个POST请求并接受数据
     * Object ()
     * @async
     * @param {JObject} json 	   - 数据对象
     * @param {Object} options     - 参数对象
     * @param {number} [timeLimit] - 超时时间/秒  最小为10秒
     * @returns {Promise<Object|null>} 结果 null 为未能成功接收
     */
    function shttpsPost(json, options, timeLimit = -1) {
        return sPost("https", json, options, timeLimit);
    }
    UtilCom.shttpsPost = shttpsPost;
    /**发送一个POST请求并接受数据
     * Object ()
     * @async
     * @param {JObject} json 	   - 数据对象
     * @param {Object} options     - 参数对象
     * @param {number} [timeLimit] - 超时时间/秒  最小为10秒
     * @returns {Promise<Object|null>} 结果 null 为未能成功接收
     */
    function shttpPost(json, options, timeLimit = -1) {
        return sPost("http", json, options, timeLimit);
    }
    UtilCom.shttpPost = shttpPost;
})(UtilCom = exports.UtilCom || (exports.UtilCom = {}));
