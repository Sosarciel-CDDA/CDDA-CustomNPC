

function print_global_val(varName){
	eoc_type("ACTIVATION")
	eobj( { u_message: "全局变量 "+varName+" 当前的值为 : <global_val:"+varName+">" })
	//eobj( { u_message: {global_val:varName}})
}

//每次进入游戏时触发
function CNPC_EOC_GameBeginEvent(){
	eoc_type("EVENT");
	required_event("game_begin");

	//初始化变量
	CNPC_EOC_InitVar();

	//动态生成的 游戏开始时 事件
	CNPC_EOC_GameBegin();
}

function CNPC_EOC_UpdateStat(){
	eoc_type("ACTIVATION")
	//print_global_val(Asuna_level);
	//recurrence("1 s");
	//print_global_val(mag3);
	//print_global_val(mag1);
	//print_global_val(mag2);
	/**
	u_teStr = u_val('strength');
	u_teDex = u_val('dexterity');
	u_teCon = u_val('strength');
	u_teMag = u_val('intelligence');
	u_teWil = u_val('perception');
	u_teCun = u_val('perception');
	*/
}


//初始化现有血量
function CNPC_EOC_InitCurrHP(){
	eoc_type("ACTIVATION")
	if(u_currHp==0)
		u_currHp = u_hp();
}

//传送法术标靶 作废备份
function CNPC_EOC_TeleportSpellTarget(){
	eoc_type("ACTIVATION")
	eobj({"u_teleport":{"global_val":"victim_loc"},"force":true})
}
//移除法术标靶
function CNPC_EOC_KillSpellTarget(){
	eoc_type("ACTIVATION")
	eobj({math:["u_hp()","=","0"]})
	//eobj({"u_location_variable":{"global_val":"tmp_loc"},"z_adjust":-10,"z_override":true})
    //eobj({"u_teleport":{"global_val":"tmp_loc"},"force":true})
}

//受伤事件
function CNPC_EOC_TakesDamage(){
	eoc_type("EVENT");
	required_event("character_takes_damage");

	if(eobj({ "u_has_trait": "CNPC_MUT_CnpcFlag" })){
		//自动伤痛分流
		eobj({ "u_cast_spell": { "id": "pain_split" } })

		//关键肢体生命值不足触发一次死亡前
		if(or(u_hp('head')<=0,u_hp('torso')<=0)){
			//触发 死亡前 事件
			CNPC_EOC_CharDeathPrev();
		}
		//关键肢体生命值不足则判断为死亡
		if(or(u_hp('head')<=0,u_hp('torso')<=0))
			CNPC_EOC_DeathProcess()
	}
}
//死亡处理
function CNPC_EOC_DeathProcess(){
	eoc_type("ACTIVATION")
	//触发 死亡时 事件
	CNPC_EOC_CharDeath();

	//眩晕怪物
	eobj({ "u_cast_spell": { "id": "CNPC_SPELL_DeathStunned" } });
	//丢下武器
	if(eobj("u_can_drop_weapon")){
		eobj({u_location_variable:{global_val:"tmp_loc"}});
		eobj({run_eoc_with:{
				id:`CNPC_EOC_DeathAfterProcess_Sub`,
				eoc_type:"ACTIVATION",
				effect:["drop_weapon"]
			},beta_loc:{"global_val":"tmp_loc"}}//把自己设为betaloc防止报错
		)
	}
	//无形体
	eobj({ "u_add_effect":"incorporeal","duration":"PERMANENT","force":true});
	//失去AI
	//eobj({ "u_add_effect":"npc_suspend","duration":"PERMANENT","force":true});
	//眩晕倒地
	eobj({ "u_add_effect":"stunned","duration":"PERMANENT","force":true});
	eobj({ "u_add_effect":"downed" ,"duration":"PERMANENT","force":true});
	//满血
	eobj({ "u_set_hp": 100, "max": true });
	eobj({ "u_add_trait": "DEBUG_NODMG" });
	eobj({ "u_add_trait": "DEBUG_CLOAK" });
	eobj({ "u_add_trait": "DEBUG_SPEED" });
	u_isDeath = 1;
}

//杀怪事件
function CNPC_EOC_KillMonster(){
	eoc_type("EVENT");
	required_event("character_kills_monster")
}

//NPC死亡事件
function CNPC_EOC_NPC_DEATH(){
	eoc_type("NPC_DEATH");
	//NPC_DEATH调用 run_eoc_with 无法正确设置 beta talker
	//固不使用
	//if(eobj({ "u_has_trait": "CNPC_MUT_CnpcFlag" })){
	//	//触发动态生成的 角色死亡 事件
	//	CNPC_EOC_CharDeath();
	//}
}

//检测现有血量并触发take_damage
function CNPC_EOC_CheckCurrHP_Melee(){
	eoc_type("ACTIVATION")
	if(and(u_currHp > u_hp(),hasTarget!=1)){
		eobj({u_location_variable:{global_val:"victim_loc"}});
		eobj({ "u_cast_spell": { "id": "CNPC_SPELL_SummonSpellTarget" } })
		//eobj({ "u_cast_spell": { "id": "CNPC_SPELL_TeleportSpellTarget" } })
		hasTarget=1;
		//运行动态生成的事件eoc
		CNPC_EOC_CharCauseDamage();
		CNPC_EOC_CharCauseMeleeDamage();
		CNPC_EOC_CharTakeDamage();
		CNPC_EOC_CharTakeMeleeDamage();
	}
	u_currHp = u_hp();
}
function CNPC_EOC_CheckCurrHP_Range(){
	eoc_type("ACTIVATION")
	if(and(u_currHp > u_hp(),hasTarget!=1)){
		eobj({u_location_variable:{global_val:"victim_loc"}});
		eobj({ "u_cast_spell": { "id": "CNPC_SPELL_SummonSpellTarget" } })
		//eobj({ "u_cast_spell": { "id": "CNPC_SPELL_TeleportSpellTarget" } })
		hasTarget=1;
		//运行动态生成的事件eoc
		CNPC_EOC_CharCauseDamage();
		CNPC_EOC_CharCauseRangeDamage();
		CNPC_EOC_CharTakeDamage();
		CNPC_EOC_CharTakeRangeDamage();
	}
	u_currHp = u_hp();
}

//近战攻击主Eoc
function CNPC_EOC_MeleeHitEvent(){
	eoc_type("ACTIVATION")
	if(eobj({ "u_has_trait": "CNPC_MUT_CnpcFlag" })){

		//尝试攻击
		CNPC_EOC_TryMeleeAttackEvent()

		//释放检测血量法术判断是否击中目标
		eobj({"u_cast_spell":{"id":"CNPC_SPELL_CheckCurrHP_Melee"}})

		//如果成功找到目标则将受害者作为beta运行子eoc
		if(hasTarget==1){
			eobj({
				"run_eoc_with":"CNPC_EOC_SucessMeleeAttackEvent",
				"beta_loc":{"global_val":"victim_loc"}
			})
		};
	}
}
//近战攻击命中触发的Eoc
function CNPC_EOC_SucessMeleeAttackEvent(){
	eoc_type("ACTIVATION")
	//通用攻击事件
	CNPC_EOC_CauseHitEvent()

	//运行动态生成的 造成近战攻击 事件eoc
	CNPC_EOC_CharSucessMeleeAttack()

	hasTarget=0; //重置flag
	eobj({"u_cast_spell":{"id":"CNPC_SPELL_KillSpellTarget"}}) //清理标靶
}
//尝试近战攻击触发的Eoc
function CNPC_EOC_TryMeleeAttackEvent(){
	eoc_type("ACTIVATION")
	//通用尝试攻击事件
	CNPC_EOC_TryAttackEvent()
	//运行动态生成的 尝试近战攻击 事件eoc
	CNPC_EOC_CharTryMeleeAttack()
}

//远程攻击主Eoc
function CNPC_EOC_RangeHitEvent(){
	eoc_type("ACTIVATION")
	if(eobj({ "u_has_trait": "CNPC_MUT_CnpcFlag" })){

		//尝试攻击
		CNPC_EOC_TryRangeAttackEvent()

		//释放检测血量法术判断是否击中目标
		eobj({"u_cast_spell":{"id":"CNPC_SPELL_CheckCurrHP_Range"}})

		//如果成功找到目标则将受害者作为beta运行子eoc
		if(hasTarget==1){
			eobj({
				"run_eoc_with":"CNPC_EOC_CauseRangeHitEvent",
				"beta_loc":{"global_val":"victim_loc"}
			})
		}
	}
}
//远程攻击命中触发的Eoc
function CNPC_EOC_CauseRangeHitEvent(){
	eoc_type("ACTIVATION")
	//通用攻击事件
	CNPC_EOC_CauseHitEvent()

	//运行动态生成的 造成远程攻击 事件eoc
	CNPC_EOC_CharCauseRangeHit()

	hasTarget=0; //重置flag
	eobj({"u_cast_spell":{"id":"CNPC_SPELL_KillSpellTarget"}}) //清理标靶
}
//尝试远程攻击触发的Eoc
function CNPC_EOC_TryRangeAttackEvent(){
	eoc_type("ACTIVATION")
	//通用尝试攻击事件
	CNPC_EOC_TryAttackEvent()
	//运行动态生成的 尝试远程攻击 事件eoc
	CNPC_EOC_CharTryRangeAttack()
}

//攻击命中触发的eoc
function CNPC_EOC_CauseHitEvent(){
	eoc_type("ACTIVATION")

	//尝试向标靶施放测试法术
	//eobj({
	//	"u_cast_spell":{"id":"CNPC_SPELL_TestConeSpell"},
	//	"targeted":true
	//})

	//运行动态生成的 造成攻击 事件eoc
	CNPC_EOC_CharCauseHit()
}
//尝试攻击触发的eoc
function CNPC_EOC_TryAttackEvent(){
	eoc_type("ACTIVATION")
	//设置不在待机
	u_notIdleOrMove=4;

	//触发进入战斗
	if(u_inBattle<=0){
		//运行动态生成的 进入战斗 事件eoc
		CNPC_EOC_CharEnterBattle()
	}

	//设置在战斗中
	u_inBattle = 60;

	//运行动态生成的 尝试攻击 事件eoc
	CNPC_EOC_CharTryAttack()
}

//生成基础npc
function CNPC_EOC_SpawnBaseNpc(){
	eoc_type("ACTIVATION")
	eobj({
		"u_spawn_npc": "CNPC_NPC_BaseNpc",
		"real_count": 1,
		"min_radius": 1,
		"max_radius": 1,
		"spawn_message": "生成了一个基础NPC"
	})
	eobj({
		"id": "asuna",
		"sound_effect": "skill",
		"volume": 100,
	})
}

//玩家移动
function CNPC_EOC_PlayerMoveEvent(){
	eoc_type("OM_MOVE")

	//记录坐标
	eobj({"u_location_variable":{"global_val":"avatar_loc"}});
}

//主循环函数 玩家
function CNPC_EOC_AvatarUpdateEvent(){
	recurrence(1);
	//刷新属性
	//CNPC_EOC_UpdateStat();

	//记录坐标
	eobj({"u_location_variable":{"global_val":"avatar_loc"}});

	//每轮刷新怪物血量
	//eobj({ "u_cast_spell": { "id": "CNPC_SPELL_InitCurrHP" } })
	//CNPC_EOC_UpdateStat();
	//print_global_val(mag3);
	//print_global_val(mag1);
	//print_global_val(mag2);
	//运行动态生成的事件eoc
	CNPC_EOC_AvatarUpdate();
}

//主循环函数 全局
function CNPC_EOC_GlobalUpdateEvent(){
	recurrence(1);
	global(true);
	run_for_npcs(true);
	//如果是CNPC的角色
	if(eobj({ "u_has_trait": "CNPC_MUT_CnpcFlag" })){

		//如果已经死亡则不触发循环
		if(u_isDeath==1){
			//u_onDeath+=1
			//if(u_onDeath>=2){
				//触发 死亡后 事件
				CNPC_EOC_CharDeathAfter();
				eobj({"run_eoc_with":"CNPC_EOC_DeathAfterProcess","beta_loc":{"global_val":"avatar_loc"}})
			//}
		}else{
			//初始化
			if(u_isInit!=1){
				//添加用于防止逃跑的勇气效果
				eobj({ "u_add_effect": "CNPC_EFF_Courage", "duration": "PERMANENT" })
				//运行动态生成的事件eoc
				CNPC_EOC_CharInit();
				u_isInit=1;
			}

			//刷新属性
			//CNPC_EOC_UpdateStat();
			//运行动态生成的事件eoc
			CNPC_EOC_CharUpdate();

			//低速刷新
			u_update_count=u_update_count+1;
			if(u_update_count>60){
				//运行动态生成的事件eoc
				CNPC_EOC_CharUpdateSlow();
				u_update_count=0;
			}

			//附近有怪物 u_search_radius 无效
			//if(eobj({ "math": [ "u_monsters_nearby('radius': 20 )", ">=", "1" ] })){
			if(u_inBattle>0){
				//触发战斗中
				//初始化怪物血量
				eobj({ "u_cast_spell": { "id": "CNPC_SPELL_InitCurrHP" } })
				//运行动态生成的事件eoc
				CNPC_EOC_CharBattleUpdate();
				u_inBattle=u_inBattle-1;
			}else{
				//触发非战斗中
				//运行动态生成的事件eoc
				CNPC_EOC_CharNonBattleUpdate();
			}


			//通过比较 loc字符串 检测移动
			eobj({
				"set_string_var": { "u_val": "u_char_preloc" },
				"target_var": { "global_val": "char_preloc" }
			})
			if(eobj({
				"compare_string": [
					{ "global_val": "char_preloc" },
					{ "mutator": "loc_relative_u", "target": "(0,0,0)" }
				]
			})){
				//设置在待机
				u_onMove=0;
			} else{
				//设置在移动
				u_onMove=1;
			}
			//更新 loc字符串
			eobj({"u_location_variable":{"u_val":"u_char_preloc"}});

			//如果不在做其他短时动作
			if(u_notIdleOrMove<=0){
				u_notIdleOrMove=0;
				//触发移动事件
				if(u_onMove>=1){
					//运行动态生成的事件eoc
					CNPC_EOC_CharMove();
				}else{//触发待机
					//运行动态生成的事件eoc
					CNPC_EOC_CharIdle();
				}
			}
			u_notIdleOrMove=u_notIdleOrMove-1;

			if(and(eobj({ "u_has_trait": "CNPC_MUT_NoAnim" }),not(eobj({ "u_has_trait": "CNPC_MUT_BaseBody" }))))
				eobj({ "u_add_trait": "CNPC_MUT_BaseBody" }) //如果无动画变异则添加替代素体
		}
	}
	else if(not(eobj({ "u_has_trait": "CNPC_MUT_BaseBody" })))
		eobj({ "u_add_trait": "CNPC_MUT_BaseBody" }) //如果不是cnpc单位则添加替代素体

	//添加属性增强变异
	if(not(eobj({ "u_has_trait": "CNPC_MUT_StatMod" })))
		eobj({ "u_add_trait": "CNPC_MUT_StatMod" })
}

//死亡后处理
function CNPC_EOC_DeathAfterProcess(){
	eoc_type("ACTIVATION")
	//传送
	eobj({u_location_variable:{global_val:"tmp_loc"},z_adjust:-10,z_override:true})
    eobj({u_teleport:{global_val:"tmp_loc"},force:true})
    eobj({npc_teleport:{global_val:"avatar_loc"},force:true})
    eobj({math:["u_hp()","=","0"]})
}





//recurrence(1);
//global(false);
//run_for_npcs(false);




