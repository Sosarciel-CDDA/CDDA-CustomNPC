import { JArray, JObject, UtilFunc } from "@zwa73/utils";
import { CON_SPELL_FLAG, genEOCID } from ".";
import { BoolObj, Eoc, EocEffect } from "./CddaJsonFormat/Eoc";
import { Spell, SpellID } from "./CddaJsonFormat/Spell";
import { DataManager } from "./DataManager";
import { TARGET_MON_ID } from "./StaticData/BaseMonster";
import { CharEventTypeList, CharEventType, InteractiveCharEventList, ReverseCharEventTypeList, ReverseCharEventType, AnyCharEvenetType } from "./Event";


//脚本提供的判断是否成功命中目标的全局变量 字段
const hasTargetVar = "hasTarget"
/**技能选择目标类型 */
type TargetType = "auto"|"random"|"spell_target"|"reverse_hit"|"direct_hit"|"auto_hit";
/**角色技能 */
export type CharSkill = {
    /**技能的释放条件 */
    cast_condition:CastCondition|CastCondition[];
    /**权重 优先尝试触发高权重的spell 默认0 */
    weight?         :number,
    /**概率 有1/chance的几率使用这个技能 默认1 */
    one_in_chance?  :number,
    /**冷却时间 单位为每次CharUpdate 默认0 */
    cooldown?       :number,
    /**共同冷却时间 影响所有技能的释放 单位为每次CharUpdate 默认1  
     * 一个高权重0共同冷却的技能意味着可以同时触发  
     */
    common_cooldown?:number,
    /**法术效果 */
    spell           :Spell|SpellID,
    /**代替原效果的法术效果 默认为根据 Spell 生成
     * 若为 SpellID 则视为范围无限其他未定义
     */
    fixspell?       :FixSpell,
    /**技能音效 */
    audio?          :(string|{
        /**音效变体ID */
        id:string,
        /**产生音效的概率 1/n 默认1 */
        one_in_chance?:number,
        /**音量 1-128 默认100 */
        volume?:number,
    })[],
    /**要求强化字段 [字段,强化等级] */
    require_field?:[string,number];
};

/**技能的释放条件 */
export type CastCondition={
    /**释放条件 若允许多个条件请使用{or:[]}  
     * 相同的hook与target将覆盖  
     */
    condition?      :BoolObj,
    /**时机 */
    hook            :AnyCharEvenetType,
    /**瞄准方式  
     * auto 为 根据施法目标自动选择;  
     * random 为 原版随机;  
     * spell_target 为 瞄准目标周围的 攻击时出现的法术标靶 仅适用于攻击触发的范围技能;  
     * direct_hit 为 直接命中 使目标使用此法术攻击自己 适用于单体目标技能  
     * hook 必须为互动事件 "CharTakeDamage" | "CharTakeRangeDamage" | "CharTakeMeleeDamage" | "CharSucessMeleeAttack" | "CharCauseRangeHit" | "CharCauseHit";  
     * reverse_hit 为 翻转命中 使目标使用此法术攻击自己 适用于单体目标技能  
     * hook 必须为翻转事件 CharCauseDamage | CharCauseMeleeDamage | CharCauseRangeDamage  
     * 除 reverse_hit 外无法使用翻转事件;  
     * auto_hit 为根据hook在 reverse_hit direct_hit 之间自动判断;  
     * 默认为auto
     * 若允许多个条件 请指定具体type  
     * 相同的hook与target(包括auto或未指定)将覆盖  
     */
    target?         :TargetType;
}

//全局冷却字段名
const gcdValName = `u_CoCooldown`;

/**使某个技能停止使用的变量 */
export function stopSpellVar(charName:string,spell:FixSpell){
    return `${charName}_${spell.id}_stop`;
}

/**简化法术信息 */
export type FixSpell={
    id:SpellID;
    name:string,
    base_energy_cost?:number ;
    energy_increment?:number ;
    final_energy_cost?:number;
}

/**处理角色技能 */
export async function createCharSkill(dm:DataManager,charName:string){
    const {defineData,outData,charConfig} = await dm.getCharData(charName);
    const skills = (charConfig.skill??[]).sort((a,b)=>(b.weight??0)-(a.weight??0));
    const skillDataList:JObject[] = [];

    //全局冷却事件
    const GCDEoc:Eoc={
        type:"effect_on_condition",
        id:genEOCID(`${charName}_CoCooldown`),
        effect:[
            {math:[gcdValName,"-=","1"]}
        ],
        condition:{math:[gcdValName,">","0"]},
        eoc_type:"ACTIVATION",
    }
    dm.addCharEvent(charName,"CharUpdate",0,GCDEoc);
    skillDataList.push(GCDEoc);


    //遍历技能
    for(const skill of skills){
        const {cast_condition,spell,cooldown,common_cooldown,audio,require_field} = skill;

        const fixspell:FixSpell = typeof spell=="object"
            ? spell as FixSpell
            : skill.fixspell
            ? skill.fixspell
            : {
                id:spell,
                name:spell
            } as const;

        //法术消耗字符串
        const spellCost = `min(${fixspell.base_energy_cost??0}+${fixspell.energy_increment??0}*`+
            `u_val('spell_level', 'spell: ${fixspell.id}'),${fixspell.final_energy_cost??999999})`;

        //生成冷却变量名
        const cdValName = `u_${fixspell.id}_Cooldown`;

        //计算成功效果
        const TEffect:EocEffect[]=[];
        if(common_cooldown!=0)
            TEffect.push({math:[gcdValName,"=",`${common_cooldown??1}`]});
        if(fixspell.base_energy_cost!=undefined)
            TEffect.push({math:["u_val('mana')","-=",spellCost]});
        if(cooldown)
            TEffect.push({math:[cdValName,"=",`${cooldown??0}`]});
        if(audio){
            TEffect.push(...audio.map(audioObj=>{
                if(typeof audioObj == "string")
                    return ({sound_effect:audioObj,id:charName,volume:100});

                const effect:EocEffect = {
                    run_eocs:{
                        id:genEOCID(`${charName}_${audioObj.id}_Chance`),
                        eoc_type:"ACTIVATION",
                        condition:{one_in_chance:audioObj.one_in_chance??1},
                        effect:[
                            {sound_effect:audioObj.id,id:charName,volume:audioObj.volume??100}
                        ],
                    }
                };
                return effect;
            }));
        }

        //遍历释放条件
        const ccs = Array.isArray(cast_condition)
            ?cast_condition
            :[cast_condition] as const;

        for(const castCondition of ccs){
            const {condition,target} = castCondition;
            //计算基础条件
            const baseCond:BoolObj[] = [
                {math:[gcdValName,"<=","0"]},
                {math:[stopSpellVar(charName,fixspell),"!=","1"]}
            ];
            if(fixspell.base_energy_cost!=undefined)
                baseCond.push({math:["u_val('mana')",">=",spellCost]});
            if(condition)
                baseCond.push(condition);
            if(cooldown)
                baseCond.push({math:[cdValName,"<=","0"]});
            if(require_field)
                baseCond.push({math:[require_field[0],">=",require_field[1]+""]});
            //基本通用数据
            const baseSkillData = {
                skill,
                TEffect,
                baseCond,
                spellCost,
                castCondition,
            }

            //处理并加入输出
            skillDataList.push(...ProcMap[target??"auto"](dm,charName,baseSkillData));
        }
        if(typeof spell=="object")
            skillDataList.push(spell);
        //冷却事件
        if(cooldown!=null){
            const CDEoc:Eoc={
                type:"effect_on_condition",
                id:genEOCID(`${charName}_${spell.id}_Cooldown`),
                effect:[
                    {math:[cdValName,"-=","1"]}
                ],
                condition:{math:[cdValName,">","0"]},
                eoc_type:"ACTIVATION",
            }
            dm.addCharEvent(charName,"CharUpdate",0,CDEoc);
            skillDataList.push(CDEoc);
        }
    }

    outData['skill'] = skillDataList;
}

/**处理方式表 */
const ProcMap:Record<TargetType,(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData)=>JObject[]>={
    "auto"          : autoProc,
    "random"        : randomProc,
    "spell_target"  : spell_targetProc,
    "reverse_hit"   : reverse_hitProc,
    "direct_hit"    : direct_hitProc,
    "auto_hit"      : auto_hitProc,
}

/**基础技能数据 */
type BaseSkillCastData=Readonly<{
    /**技能 */
    skill:CharSkill;
    /**基础释放eoc条件 */
    baseCond:BoolObj[];
    /**基础成功eoc效果 */
    TEffect:EocEffect[];
    /**释放条件 */
    castCondition: CastCondition;
}>

//获取施法方式的uid
function castCondUid(cc:CastCondition){
    return `${cc.hook}_${cc.target??"auto"}`;
}

function spell_targetProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    const {skill,baseCond,TEffect,castCondition} = baseSkillData;
    const {spell,one_in_chance} = skill;
    const {hook} = castCondition;
    const ccuid = castCondUid(castCondition);

    //如果需要选择目标 创建索敌辅助法术
    const {min_aoe,max_aoe,aoe_increment,
        min_range,max_range,range_increment,
        max_level,shape} = spell;
    const selTargetSpell = {
        id:`${spell.id}_SelTarget_${ccuid}` as SpellID,
        type:"SPELL",
        name:spell.name+"_索敌",
        description:`${spell.name}的辅助索敌法术`,
        effect:"attack",
        flags:["WONDER","RANDOM_TARGET",...CON_SPELL_FLAG],
        min_damage: 1,
        max_damage: 1,
        valid_targets:["hostile"],
        targeted_monster_ids:[TARGET_MON_ID],
        min_aoe,max_aoe,aoe_increment,
        min_range,max_range,range_increment,
        shape,max_level,
        extra_effects:[{id:spell.id}],
    }

    //创建施法EOC
    const castEoc:Eoc={
        type:"effect_on_condition",
        id:genEOCID(`${charName}_Cast${spell.id}_${ccuid}`),
        eoc_type:"ACTIVATION",
        effect:[
            {
                u_cast_spell:{
                    id:selTargetSpell.id,
                    once_in:one_in_chance,
                },
                targeted: true,
                true_eocs:{
                    id:genEOCID(`${charName}_${spell.id}TrueEoc_${ccuid}`),
                    effect:[...TEffect],
                    eoc_type:"ACTIVATION",
                }
            }
        ],
        condition:{and:[
            {math:[hasTargetVar,"==","1"]}
            ,...baseCond]},
    }

    //加入触发
    if(ReverseCharEventTypeList.includes(hook as any))
        throw `翻转事件只能应用于翻转命中`
    dm.addCharEvent(charName,hook as CharEventType,0,castEoc);

    return [castEoc,selTargetSpell];
}

function randomProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    const {skill,baseCond,TEffect,castCondition} = baseSkillData;
    const {spell,one_in_chance} = skill;
    const {hook} = castCondition;
    const ccuid = castCondUid(castCondition);

    //创建施法EOC
    const castEoc:Eoc={
        type:"effect_on_condition",
        id:genEOCID(`${charName}_Cast${spell.id}_${ccuid}`),
        eoc_type:"ACTIVATION",
        effect:[
            {
                u_cast_spell:{
                    id:spell.id,
                    once_in:one_in_chance,
                },
                targeted: false,
                true_eocs:{
                    id:genEOCID(`${charName}_${spell.id}TrueEoc_${ccuid}`),
                    effect:[...TEffect],
                    eoc_type:"ACTIVATION",
                }
            }
        ],
        condition:{and:[...baseCond]},
    }

    //加入触发
    if(ReverseCharEventTypeList.includes(hook as any))
        throw `翻转事件只能应用于翻转命中`
    dm.addCharEvent(charName,hook as CharEventType,0,castEoc);

    return [castEoc];
}

function reverse_hitProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    let {skill,baseCond,TEffect,castCondition} = baseSkillData;
    const {spell,one_in_chance} = skill;
    const {hook} = castCondition;
    const ccuid = castCondUid(castCondition);

    //复制法术
    const rspell = UtilFunc.deepClone(spell);
    rspell.id = `${rspell.id}_reverse_${ccuid}` as SpellID;
    rspell.valid_targets.push("self");

    //解析伤害字符串
    let dmgstr = `0`;
    let dmgvar = `${rspell.id}_reverse_dmg_${ccuid}`;
    if(rspell.min_damage!==undefined){
        if(typeof rspell.min_damage == "number")
            dmgstr = rspell.min_damage+"";
        else if("math" in rspell.min_damage)
            dmgstr = rspell.min_damage.math[0];
        else throw `翻转命中伤害只支持固定值number 或 math表达式`
    }
    rspell.min_damage = {math:[dmgvar]};
    rspell.max_damage = 999999;

    //翻转u与n
    baseCond = JSON.parse(JSON.stringify(baseCond).replace(/(?<!\w)u_/g, 'n_'));
    TEffect = JSON.parse(JSON.stringify(TEffect).replace(/(?<!\w)u_/g, 'n_'));
    dmgstr = dmgstr.replace(/(?<!\w)u_/g, 'n_');


    //创建翻转的施法EOC
    const castEoc:Eoc={
        type:"effect_on_condition",
        id:genEOCID(`${charName}_Cast${spell.id}_${ccuid}`),
        eoc_type:"ACTIVATION",
        effect:[
            {math: [dmgvar , `=` , dmgstr]},//预先计算伤害
            {
                u_cast_spell:{
                    id:rspell.id,
                    once_in:one_in_chance,
                    hit_self:true              //如果是翻转事件则需命中自身
                },
                true_eocs:{
                    id:genEOCID(`${charName}_${spell.id}TrueEoc_${ccuid}`),
                    effect:[...TEffect],
                    eoc_type:"ACTIVATION",
                }
            }
        ],
        condition:{and:[...baseCond]},
    }

    //加入触发
    if(CharEventTypeList.includes(hook as any))
        throw `翻转命中 所用的事件必须为 翻转事件: ${ReverseCharEventTypeList}`
    dm.addReverseCharEvent(charName,hook as ReverseCharEventType,0,castEoc);

    return [rspell,castEoc];
}

function direct_hitProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    let {skill,baseCond,TEffect,castCondition} = baseSkillData;
    const {spell,one_in_chance} = skill;
    const {hook} = castCondition;
    const ccuid = castCondUid(castCondition);

    //复制法术
    const rspell = UtilFunc.deepClone(spell);
    rspell.id = `${rspell.id}_reverse_${ccuid}` as SpellID;
    rspell.valid_targets.push("self");

    //解析伤害字符串
    let dmgstr = `0`;
    let dmgvar = `${rspell.id}_reverse_dmg_${ccuid}`;
    if(rspell.min_damage!==undefined){
        if(typeof rspell.min_damage == "number")
            dmgstr = rspell.min_damage+"";
        else if("math" in rspell.min_damage)
            dmgstr = rspell.min_damage.math[0];
        else throw `直接命中伤害只支持固定值number 或 math表达式`
    }
    rspell.min_damage = {math:[dmgvar]};
    rspell.max_damage = 999999;


    //创建翻转的施法EOC
    const castEoc:Eoc={
        type:"effect_on_condition",
        id:genEOCID(`${charName}_Cast${spell.id}_${ccuid}`),
        eoc_type:"ACTIVATION",
        effect:[
            {math: [dmgvar , `=` , dmgstr]},//预先计算伤害
            {
                npc_cast_spell:{
                    id:rspell.id,
                    once_in:one_in_chance,
                    hit_self:true              //如果是翻转事件则需命中自身
                },
                true_eocs:{
                    id:genEOCID(`${charName}_${spell.id}TrueEoc_${ccuid}`),
                    effect:[...TEffect],
                    eoc_type:"ACTIVATION",
                }
            }
        ],
        condition:{and:["npc_is_alive",
            {math:[hasTargetVar,"==","1"]}
            ,...baseCond]},
    }

    //加入触发
    if(!InteractiveCharEventList.includes(hook as any))
        throw `直接命中 所用的事件必须为 交互事件: ${InteractiveCharEventList}`
    dm.addCharEvent(charName,hook as CharEventType,0,castEoc);

    return [rspell,castEoc];
}

function autoProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    const {skill,castCondition} = baseSkillData;
    const {spell} = skill;
    const {hook} = castCondition;
    //判断瞄准方式
    //是敌对目标法术
    const isHostileTarget = spell.valid_targets.includes("hostile");
    //是Aoe法术
    const isAoe = (spell.min_aoe!=null && spell.min_aoe!=0) ||
        (spell.aoe_increment!=null && spell.aoe_increment!=0);

    //aoe敌对目标法术将使用法术标靶
    if(isHostileTarget && isAoe)
        return ProcMap.spell_target(dm,charName,baseSkillData);
    //非aoe 且 hook为互动事件的的敌对目标法术 将直接命中
    if((ReverseCharEventTypeList.includes(hook as any)  ||
        InteractiveCharEventList.includes(hook as any)) &&
        isHostileTarget)
        return ProcMap.auto_hit(dm,charName,baseSkillData);
    //其他法术随机
    return ProcMap.random(dm,charName,baseSkillData);
}

function auto_hitProc(dm:DataManager,charName:string,baseSkillData:BaseSkillCastData){
    const {skill,castCondition} = baseSkillData;
    const {hook} = castCondition;
    if(ReverseCharEventTypeList.includes(hook as any))
        return ProcMap.reverse_hit(dm,charName,baseSkillData);
    if(InteractiveCharEventList.includes(hook as any))
        return ProcMap.direct_hit(dm,charName,baseSkillData);
    throw `auto_hitProc 的hook 必须为 翻转事件:${ReverseCharEventTypeList}\n或互动事件:&{InteractiveCharEventList}`;
}